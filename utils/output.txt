
===== .\.eslintrc.json =====
// ===== .\.eslintrc.json =====
{
  "extends": "next/core-web-vitals",
  "rules": {
    // Tắt quy tắc yêu cầu escape các ký tự đặc biệt như ' và " trong JSX.
    // Đây là lỗi chính khiến build thất bại.
    "react/no-unescaped-entities": "off",

    // Tắt quy tắc cấm sử dụng kiểu 'any'.
    // Điều này sẽ giải quyết các lỗi '@typescript-eslint/no-explicit-any'.
    "@typescript-eslint/no-explicit-any": "off",
    
    // Chuyển cảnh báo về biến không sử dụng thành "warning" thay vì "error".
    // Build sẽ không thất bại vì cảnh báo này nữa.
    "@typescript-eslint/no-unused-vars": "warn",

    // Tắt quy tắc yêu cầu interface không được rỗng.
    "@typescript-eslint/no-empty-interface": "off",

    // Tắt cảnh báo về việc dùng <img> thay vì <Image /> của Next.js.
    // Bạn có thể bật lại sau khi đã tối ưu hóa tất cả các ảnh.
    "@next/next/no-img-element": "off"
  }
}

===== .\next-env.d.ts =====
/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference path="./.next/types/routes.d.ts" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


===== .\next.config.ts =====
import type { NextConfig } from "next";
import createNextIntlPlugin from "next-intl/plugin";

const nextConfig: NextConfig = {
  eslint: {ignoreDuringBuilds: true},
};

const withNextIntl = createNextIntlPlugin();

export default withNextIntl(nextConfig);


===== .\package.json =====
{
  "name": "my-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build --turbopack",
    "start": "next start",
    "lint": "eslint"
  },
  "dependencies": {
    "@iconify/react": "^6.0.2",
    "@react-three/drei": "^10.7.6",
    "@react-three/fiber": "^9.3.0",
    "leva": "^0.10.0",
    "next": "15.5.4",
    "next-intl": "^4.3.9",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "three": "^0.180.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.5.4",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}


===== .\tailwind.config.ts =====
// tailwind.config.js or tailwind.config.ts
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        // Cú pháp này cho phép bạn dùng class như font-inter, font-unbounded
        inter: ['var(--font-inter)', 'sans-serif'],
        unbounded: ['var(--font-unbounded)', 'sans-serif'],
      },
    },
  },
  plugins: [],
}

===== .\tsconfig.json =====
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


===== .\i18n\navigation.ts =====
import {createNavigation} from 'next-intl/navigation';
import {routing} from './routing';

export const {Link, getPathname, redirect, usePathname, useRouter} =
  createNavigation(routing);

===== .\i18n\request.ts =====
import {hasLocale} from 'next-intl';
import {getRequestConfig} from 'next-intl/server';
import {routing} from './routing';

export default getRequestConfig(async ({requestLocale}) => {
  // Typically corresponds to the `[locale]` segment
  const requested = await requestLocale;
  const locale = hasLocale(routing.locales, requested)
    ? requested
    : routing.defaultLocale;

  return {
    locale,
    messages: (await import(`../messages/${locale}.json`)).default
  };
});

===== .\i18n\routing.ts =====
import {defineRouting} from 'next-intl/routing';

export const routing = defineRouting({
  locales: ['en', 'vi'],
  defaultLocale: 'vi',
  pathnames: {
    // Các đường dẫn đã có
    '/': '/',
    '/pathnames': {
      vi: '/pfadnamen'
    },

    // --- BỔ SUNG CÁC ĐƯỜNG DẪN MỚI TẠI ĐÂY ---
    '/login': '/login',
    '/register': '/register',
    '/forgot-password': '/forgot-password',
    '/terms': '/terms',
    '/privacy': '/privacy',
    
    // Thêm luôn các đường dẫn từ Header và Footer để tránh lỗi sau này
    '/community': '/community',
    '/features': '/features',
    '/pricing': '/pricing',
    '/start': '/start',
    '/plugin': '/plugin',
    '/status': '/status',
    '/about': '/about',
    '/contact': '/contact',
    '/workspace': '/workspace',
  }
});

===== .\messages\en.json =====
{
  "Header": {
    "home": "Home",
    "community": "Community",
    "features": "Features",
    "pricing": "Pricing",
    "log_in": "Log In",
    "start_for_free": "Start For Free"
  },
  "Hero": {
    "title": "The NO.1 AI 3D Model Generator for Everyone",
    "description": "Convert your photos or concept art images into 3D models with stunning details in just a matter of seconds.",
    "start_for_free": "START FOR FREE",
    "explore": "EXPLORE"
  },
  "ImageGallery": {
    "title": "Step into the World of 3D Imagination",
    "description": "Discover and download a variety of unique 3D models from our vibrant community.",
    "load_more": "Load more"
  },
  "WorkflowCTA": {
    "title": "Unlock a faster 3D workflow",
    "description": "Transform your design process with V2R. Try it now and see your creativity come to life effortlessly!",
    "start_for_free": "START FOR FREE",
    "explore": "EXPLORE"
  },
  "Footer": {
    "subscribe_title": "Subscribe to updates",
    "subscribe_description": "Join our newsletter to stay updated on latest news",
    "email_placeholder": "Enter your email",
    "subscribe_button": "Subscribe",
    "features_title": "Features",
    "text_to_3d": "Text to 3D",
    "image_to_3d": "Image to 3D",
    "product_title": "Product",
    "pricing": "Pricing",
    "community": "Community",
    "plugin": "Plugin",
    "status": "Status",
    "company_title": "Company",
    "about": "About",
    "contact": "Contact"
  },
  "Sidebar": {
    "text_to_3d": "Text to 3D",
    "image_to_3d": "Image to 3D",
    "image_label": "Image",
    "uploader_title": "Your Image Here",
    "uploader_formats": "Formats: .png, .jpg, .jpeg, .webp",
    "name_label": "Name",
    "name_placeholder": "Untitled Project",
    "model_label": "AI Model",
    "symmetry_label": "Symmetry",
    "symmetry_off": "Off",
    "symmetry_auto": "Auto",
    "symmetry_on": "On",
    "cost_info_model": "1 model",
    "cost_info_tokens": "10 tokens",
    "generate_button": "Generate"
  },
  "Login": {
    "welcome": "Welcome to V2R",
    "get_started": "Enter your Email to get started",
    "email_placeholder": "Email",
    "password_placeholder": "Password",
    "continue_button": "Continue",
    "forgot_password": "Forgot password",
    "or": "Or",
    "continue_with_google": "Continue with Google",
    "no_account": "Don't have an account?",
    "register_now": "Register now",
    "terms_prefix": "By continuing, you agree to our",
    "terms_of_use": "Terms of Use",
    "terms_and": "and",
    "privacy_policy": "Privacy Policy"
  },
    "Register": {
    "welcome": "Welcome to V2R",
    "get_started": "Enter your Email to get started",
    "email_placeholder": "Email",
    "password_placeholder": "Password",
    "confirm_password_placeholder": "Confirm Password",
    "continue_button": "Continue",
    "have_account": "Already have an account?",
    "login_now": "Log In",
    "terms_prefix": "By continuing, you agree to our",
    "terms_of_use": "Terms of Use",
    "terms_and": "and",
    "privacy_policy": "Privacy Policy"
  },
  "Workspace": {
    "new_project": "New Project",
    "your_library": "Your Library",
    "upgrade_account": "Upgrade Account",
    "user_free_tier": "Free",
    "search": "Search",
    "upload": "Upload",
    "my_library": "My Library"
  }
}

===== .\messages\vi.json =====
{
  "Header": {
    "home": "Trang chủ",
    "community": "Cộng đồng",
    "features": "Tính năng",
    "pricing": "Bảng giá",
    "log_in": "Đăng nhập",
    "start_for_free": "Bắt đầu miễn phí"
  },
  "Hero": {
    "title": "Trình Tạo Mô Hình 3D AI SỐ 1 Cho Mọi Người",
    "description": "Chuyển đổi ảnh hoặc hình ảnh concept của bạn thành mô hình 3D với chi tiết tuyệt đẹp chỉ trong vài giây.",
    "start_for_free": "BẮT ĐẦU MIỄN PHÍ",
    "explore": "KHÁM PHÁ"
  },
  "ImageGallery": {
    "title": "Bước vào Thế giới Tưởng tượng 3D",
    "description": "Khám phá và tải xuống nhiều mô hình 3D độc đáo từ cộng đồng sôi động của chúng tôi.",
    "load_more": "Tải thêm"
  },
  "WorkflowCTA": {
    "title": "Mở khóa quy trình làm việc 3D nhanh hơn",
    "description": "Thay đổi quy trình thiết kế của bạn với V2R. Hãy thử ngay bây giờ và chứng kiến sự sáng tạo của bạn trở nên sống động một cách dễ dàng!",
    "start_for_free": "BẮT ĐẦU MIỄN PHÍ",
    "explore": "KHÁM PHÁ"
  },
  "Footer": {
    "subscribe_title": "Đăng ký nhận thông tin cập nhật",
    "subscribe_description": "Tham gia bản tin của chúng tôi để luôn cập nhật những tin tức mới nhất",
    "email_placeholder": "Nhập email của bạn",
    "subscribe_button": "Đăng ký",
    "features_title": "Tính năng",
    "text_to_3d": "Văn bản sang 3D",
    "image_to_3d": "Hình ảnh sang 3D",
    "product_title": "Sản phẩm",
    "pricing": "Bảng giá",
    "community": "Cộng đồng",
    "plugin": "Plugin",
    "status": "Trạng thái",
    "company_title": "Công ty",
    "about": "Về chúng tôi",
    "contact": "Liên hệ"
  },
  "Sidebar": {
    "text_to_3d": "Văn bản sang 3D",
    "image_to_3d": "Hình ảnh sang 3D",
    "image_label": "Hình ảnh",
    "uploader_title": "Hình ảnh của bạn ở đây",
    "uploader_formats": "Định dạng: .png, .jpg, .jpeg, .webp",
    "name_label": "Tên",
    "name_placeholder": "Dự án chưa có tên",
    "model_label": "Mô hình AI",
    "symmetry_label": "Đối xứng",
    "symmetry_off": "Tắt",
    "symmetry_auto": "Tự động",
    "symmetry_on": "Bật",
    "cost_info_model": "1 mô hình",
    "cost_info_tokens": "10 tokens",
    "generate_button": "Tạo"
  },
  "Login": {
    "welcome": "Chào mừng đến với V2R",
    "get_started": "Nhập Email của bạn để bắt đầu",
    "email_placeholder": "Email",
    "password_placeholder": "Mật khẩu",
    "continue_button": "Tiếp tục",
    "forgot_password": "Quên mật khẩu",
    "or": "Hoặc",
    "continue_with_google": "Tiếp tục với Google",
    "no_account": "Chưa có tài khoản?",
    "register_now": "Đăng ký ngay",
    "terms_prefix": "Bằng việc tiếp tục, bạn đồng ý với",
    "terms_of_use": "Điều khoản sử dụng",
    "terms_and": "và",
    "privacy_policy": "Chính sách bảo mật"
  },
  "Register": {
    "welcome": "Chào mừng đến với V2R",
    "get_started": "Nhập Email của bạn để bắt đầu",
    "email_placeholder": "Email",
    "password_placeholder": "Mật khẩu",
    "confirm_password_placeholder": "Xác nhận mật khẩu",
    "continue_button": "Tiếp tục",
    "have_account": "Đã có tài khoản?",
    "login_now": "Đăng nhập",
    "terms_prefix": "Bằng việc tiếp tục, bạn đồng ý với",
    "terms_of_use": "Điều khoản sử dụng",
    "terms_and": "và",
    "privacy_policy": "Chính sách bảo mật"
  },
  "Workspace": {
    "new_project": "Dự án mới",
    "your_library": "Thư viện của bạn",
    "upgrade_account": "Nâng cấp tài khoản",
    "user_free_tier": "Miễn phí",
    "search": "Tìm kiếm",
    "upload": "Tải lên",
    "my_library": "Thư viện của tôi"
  }
}

===== .\src\middleware.ts =====
// src/middleware.ts
import createMiddleware from 'next-intl/middleware';

export default createMiddleware({
  locales: ['en', 'vi'],
  defaultLocale: 'en'
});

export const config = {
  matcher: ['/((?!api|_next/static|_next/image|favicon.ico|.*\\..*).*)']
};


===== .\src\app\globals.css =====
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

/* CẬP NHẬT: Thêm CSS để buộc Leva dropdown mở lên trên */
/* [data-leva-root] là selector ổn định cho container của Leva */
[data-leva-root] .leva-c-hPncDm { /* Đây là class của panel nổi */
  bottom: calc(100% + 8px) !important; /* Đẩy panel lên trên + 8px khoảng cách */
  top: auto !important; /* Tắt định vị top mặc định */
}

===== .\src\app\providers.tsx =====
"use client";

import { AuthProvider } from "@/context/AuthContext";
import { ReactNode } from "react";

// Component này sẽ đóng vai trò là điểm vào phía client cho các provider
export function Providers({ children }: { children: ReactNode }) {
  return (
    <AuthProvider>
      {children}
    </AuthProvider>
  );
}

===== .\src\app\[locale]\layout.tsx =====
// app/layout.tsx
import type { Metadata } from 'next';
import { Inter, Unbounded } from 'next/font/google';
import '../globals.css';
import { NextIntlClientProvider } from 'next-intl';
import { getMessages } from 'next-intl/server';
// 1. Import component Providers mới
import { Providers } from '../providers';

// Font setup
const inter = Inter({ subsets: ['latin'], variable: '--font-inter' });
const unbounded = Unbounded({ subsets: ['latin'], variable: '--font-unbounded' });

export const metadata: Metadata = {
  title: 'Vision2Realty',
  description: 'The NO.1 AI 3D Model Generator for Everyone',
};

// Định nghĩa kiểu cho props của layout
interface RootLayoutProps {
  children: React.ReactNode;
  params: { locale: string };
}

export default async function RootLayout({ children, params }: {children: React.ReactNode, params: Promise<{locale: string}>}) {
  const {locale} = await params;
  const messages = await getMessages();
  return (
    <html lang={locale}>
      <body className={`${inter.variable} ${unbounded.variable} bg-stone-50 font-inter`}>
        <NextIntlClientProvider locale={locale} messages={messages}>
          {/* 2. Sử dụng component Providers ở đây */}
          <Providers>
            <main>{children}</main>
          </Providers>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}

===== .\src\app\[locale]\page.tsx =====
"use client";

import Footer from "@/components/Footer";
import Hero from "@/components/Hero";
import ImageGallery from "@/components/ImageGallery";
import WorkflowCTA from "@/components/WorkflowCTA";
import Header from "@/components/Header";

export default function Home() {
  return (
    <>
      <Header />
      <Hero />
      <ImageGallery />
      <WorkflowCTA />
      <Footer />
    </>
  );
}

===== .\src\app\[locale]\login\page.tsx =====
"use client";

import { Icon } from '@iconify/react';
import { useTranslations } from 'next-intl';
import Image from 'next/image';
import { Link } from '../../../../i18n/navigation';
import { useAuth } from '@/context/AuthContext'; // 1. Import useAuth
import React from 'react';

export default function LoginPage() {
  const t = useTranslations('Login');
  const { login } = useAuth(); // 2. Lấy hàm login

  const handleLogin = (e: React.FormEvent) => {
    e.preventDefault(); // Ngăn form submit lại trang
    login(); // 3. Gọi hàm login để cập nhật trạng thái và chuyển hướng
  };

  return (
    <main className="flex items-center justify-center min-h-screen bg-neutral-800">
      <div className="w-full max-w-sm mx-auto bg-stone-900 text-white rounded-2xl shadow-lg p-8">
        
        <div className="text-center mb-4">
          <Image src="/logo/light.png" alt="V2R Logo" width={50} height={31} className="mx-auto mb-6" />
          <h1 className="text-xl font-semibold font-['Unbounded']">{t('welcome')}</h1>
          <p className="text-sm text-gray-300 font-['Inter'] mt-2">{t('get_started')}</p>
        </div>

        {/* 4. Gắn sự kiện onSubmit */}
        <form className="space-y-4" onSubmit={handleLogin}>
          <div>
            <input 
              type="email" 
              placeholder={t('email_placeholder')}
              className="w-full h-10 px-4 bg-stone-900 border border-zinc-700 rounded-lg text-sm text-zinc-400 font-['Inter'] focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <input 
              type="password" 
              placeholder={t('password_placeholder')}
              className="w-full h-10 px-4 bg-stone-900 border border-zinc-700 rounded-lg text-sm text-zinc-400 font-['Inter'] focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <button 
            type="submit"
            className="w-full h-10 bg-blue-800 rounded-lg text-sm font-bold font-['Unbounded'] hover:bg-blue-700 transition-colors"
          >
            {t('continue_button')}
          </button>
        </form>

        <div className="text-center mt-4">
          <Link href="/forgot-password" className="text-xs text-cyan-300 hover:underline font-semibold font-['Inter']">
            {t('forgot_password')}
          </Link>
        </div>
        
        <div className="flex items-center my-6">
          <hr className="w-full border-zinc-700" />
          <span className="px-2 text-xs text-stone-300 font-['Inter']">{t('or')}</span>
          <hr className="w-full border-zinc-700" />
        </div>

        <button className="w-full h-10 mt-4 bg-white text-black rounded-lg text-sm font-semibold font-['Inter'] flex items-center justify-center hover:bg-gray-200 transition-colors">
          <Icon icon="flat-color-icons:google" className="w-5 h-5 mr-2" />
          {t('continue_with_google')}
        </button>

        <div className="flex justify-center space-x-4 mt-6">
            <Link href="/" className="w-9 h-9 bg-white rounded-full flex items-center justify-center" aria-label="Continue with Facebook">
                <Icon icon="logos:facebook" className="w-full h-full" />
            </Link>
            <Link href="/" className="w-9 h-9 bg-black rounded-full flex items-center justify-center border border-gray-600" aria-label="Continue with X">
                <Icon icon="fa6-brands:square-x-twitter" className="w-full h-full" />
            </Link>
            <Link href="/" className="w-9 h-9 bg-[#5865F2] rounded-full flex items-center justify-center" aria-label="Continue with Discord">
                <Icon icon="skill-icons:discord" className="w-full h-full" />
            </Link>
            <Link href="/" className="w-9 h-9 bg-[#26A5E4] rounded-full flex items-center justify-center" aria-label="Continue with Telegram">
                <Icon icon="streamline-color:telegram-flat" className="w-full h-full" />
            </Link>
        </div>

        <div className="text-center text-xs text-white font-medium font-['Inter'] mt-6">
          {t('no_account')}{' '}
          <Link href="/register" className="text-cyan-300 hover:underline">
            {t('register_now')}
          </Link>
        </div>

        <div className="text-center text-zinc-400 text-[9px] font-medium font-['Inter'] mt-8">
          <span>{t('terms_prefix')} </span>
          <Link href="/terms" className="text-cyan-300 hover:underline">{t('terms_of_use')}</Link>
          <span> {t('terms_and')} </span>
          <Link href="/privacy" className="text-cyan-300 hover:underline">{t('privacy_policy')}</Link>
          <span>.</span>
        </div>

      </div>
    </main>
  );
}

===== .\src\app\[locale]\register\page.tsx =====
"use client";

import { useTranslations } from 'next-intl';
import Image from 'next/image';
import { Link } from '@/../i18n/navigation';

export default function RegisterPage() {
  const t = useTranslations('Register');

  return (
    <main className="flex items-center justify-center min-h-screen bg-neutral-800">
      <div className="w-full max-w-sm mx-auto bg-stone-900 text-white rounded-2xl shadow-lg p-8">
        
        <div className="text-center mb-4">
          <Image src="/logo/light.png" alt="V2R Logo" width={50} height={31} className="mx-auto mb-6" />
          <h1 className="text-xl font-semibold font-['Unbounded']">{t('welcome')}</h1>
          <p className="text-sm text-gray-300 font-['Inter'] mt-2">{t('get_started')}</p>
        </div>

        <form className="space-y-4">
          <div>
            <input 
              type="email" 
              placeholder={t('email_placeholder')}
              className="w-full h-10 px-4 bg-stone-900 border border-zinc-700 rounded-lg text-sm text-zinc-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <input 
              type="password" 
              placeholder={t('password_placeholder')}
              className="w-full h-10 px-4 bg-stone-900 border border-zinc-700 rounded-lg text-sm text-zinc-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
           <div>
            <input 
              type="password" 
              placeholder={t('confirm_password_placeholder')}
              className="w-full h-10 px-4 bg-stone-900 border border-zinc-700 rounded-lg text-sm text-zinc-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <button 
            type="submit"
            className="w-full h-10 bg-blue-800 rounded-lg text-sm font-bold font-['Unbounded'] hover:bg-blue-700 transition-colors"
          >
            {t('continue_button')}
          </button>
        </form>

        <div className="text-center text-xs text-white font-medium font-['Inter'] mt-6">
          {t('have_account')}{' '}
          <Link href="/login" className="text-cyan-300 hover:underline font-semibold">
            {t('login_now')}
          </Link>
        </div>

        <div className="text-center text-zinc-400 text-[9px] font-medium font-roboto mt-8">
          <span>{t('terms_prefix')} </span>
          <Link href="/terms" className="text-cyan-300 hover:underline">{t('terms_of_use')}</Link>
          <span> {t('terms_and')} </span>
          <Link href="/privacy" className="text-cyan-300 hover:underline">{t('privacy_policy')}</Link>
          <span>.</span>
        </div>

      </div>
    </main>
  );
}

===== .\src\app\[locale]\workspace\page.tsx =====
"use client";

import { useState } from "react";
import { Icon } from "@iconify/react";
import Sidebar from "@/components/workspace/Sidebar";
import ViewPanel from "@/components/workspace/ViewPanel";
import LibraryPanel from "@/components/workspace/LibraryPanel"; 

export default function WorkspacePage() {
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
  const [isMobileSidebarOpen, setMobileSidebarOpen] = useState(false);
  // CẬP NHẬT: Thêm state để quản lý trạng thái thu gọn của LibraryPanel
  const [isLibraryPanelCollapsed, setIsLibraryPanelCollapsed] = useState(false);

  return (
    <main className="flex w-screen h-screen overflow-hidden bg-neutral-900">
      
      <button
        onClick={() => setMobileSidebarOpen(true)}
        className="absolute top-4 left-4 z-30 lg:hidden p-2 bg-gray-700/50 text-white rounded-md"
        aria-label="Open sidebar"
      >
        <Icon icon="mdi:menu" width={24} />
      </button>

      <Sidebar 
        isCollapsed={isSidebarCollapsed}
        setIsCollapsed={setIsSidebarCollapsed}
        isSidebarOpen={isMobileSidebarOpen}
        setIsSidebarOpen={setMobileSidebarOpen}
      />

      <div className="flex-1 flex flex-col relative overflow-hidden">
        <ViewPanel />
      </div>

      {/* CẬP NHẬT: Truyền props isCollapsed và setIsCollapsed cho LibraryPanel */}
      <LibraryPanel 
        isCollapsed={isLibraryPanelCollapsed}
        setIsCollapsed={setIsLibraryPanelCollapsed}
      />
      
    </main>
  );
}

===== .\src\components\Footer.tsx =====
"use client";

import type { FC } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { useTranslations } from 'next-intl';

const Footer: FC = () => {
  const t = useTranslations('Footer');

  return (
    <footer className="relative bg-gradient-to-b from-stone-50 to-blue-800 rounded-t-3xl pt-24 pb-12">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 grid grid-cols-1 md:grid-cols-4 lg:grid-cols-5 gap-8 text-neutral-900">
        {/* Subscription */}
        <div className="lg:col-span-2">
          <h3 className="text-xl font-semibold font-['Unbounded']">{t('subscribe_title')}</h3>
          <p className="mt-2 text-lg font-['Inter']">{t('subscribe_description')}</p>
          <form className="mt-4 flex flex-col sm:flex-row gap-4">
            <input 
              type="email" 
              placeholder={t('email_placeholder')}
              className="w-full sm:w-80 h-11 px-4 rounded-[10px] bg-white text-stone-500 font-['Inter']" 
            />
        <button className="bg-blue-800 text-white text-lg font-medium font-['Unbounded'] rounded-[10px] h-11 px-8 whitespace-nowrap">
          {t('subscribe_button')}
        </button>
          </form>
        </div>
        
        {/* Links */}
        <div>
          <h3 className="text-xl font-semibold font-['Unbounded']">{t('features_title')}</h3>
          <ul className="mt-4 space-y-2 text-lg font-['Inter']">
            <li><Link href="/features#text-to-3d">{t('text_to_3d')}</Link></li>
            <li><Link href="/features#image-to-3d">{t('image_to_3d')}</Link></li>
          </ul>
        </div>

        <div>
          <h3 className="text-xl font-semibold font-['Unbounded']">{t('product_title')}</h3>
          <ul className="mt-4 space-y-2 text-lg font-['Inter']">
            <li><Link href="/pricing">{t('pricing')}</Link></li>
            <li><Link href="/community">{t('community')}</Link></li>
            <li><Link href="/plugin">{t('plugin')}</Link></li>
            <li><Link href="/status">{t('status')}</Link></li>
          </ul>
        </div>

        <div>
          <h3 className="text-xl font-semibold font-['Unbounded']">{t('company_title')}</h3>
          <ul className="mt-4 space-y-2 text-lg font-['Inter']">
            <li><Link href="/about">{t('about')}</Link></li>
            <li><Link href="/contact">{t('contact')}</Link></li>
          </ul>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-16 flex justify-between items-center">
         <Image src="/logo/dark.png" alt="Logo" width={50} height={50} />
      </div>
    </footer>
  );
};

export default Footer;

===== .\src\components\Header.tsx =====
"use client";

import { useState } from 'react';
import Image from 'next/image';
import { Link } from '../../i18n/navigation'; // Sử dụng Link từ next-intl
import { useTranslations } from 'next-intl';
import LanguageSwitcher from '@/components/LanguageSwitcher';
import { useAuth } from '@/context/AuthContext'; // 1. Import useAuth hook
import { Icon } from '@iconify/react';

const Header = () => {
  const t = useTranslations('Header');
  const { isAuthenticated, logout } = useAuth(); // 2. Lấy trạng thái và hàm logout
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);

  return (
    <header className="absolute top-0 left-0 w-full z-10">
      <nav className="flex items-center justify-between max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-24">
        <div className="flex items-center">
          <Link href="/">
            <Image src="/logo/dark.png" alt="Logo" width={50} height={50} />
          </Link>
        </div>
        <div className="hidden md:flex items-center space-x-8 text-gray-800 font-['Unbounded'] text-lg">
          <Link href="/" className="bg-neutral-900 text-neutral-100 rounded-xl px-6 py-2.5 font-bold">{t('home')}</Link>
          <Link href="/community">{t('community')}</Link>
          <Link href="/features">{t('features')}</Link>
          <Link href="/pricing">{t('pricing')}</Link>
        </div>
        <div className="hidden md:flex items-center space-x-4">
          <LanguageSwitcher />

          {/* 3. Hiển thị có điều kiện */}
          {isAuthenticated ? (
            <div className="relative">
              <button onClick={() => setIsDropdownOpen(!isDropdownOpen)} className="w-10 h-10 bg-zinc-300 rounded-full flex items-center justify-center">
                <Icon icon="mdi:user" className="w-6 h-6 text-black" />
              </button>
              {isDropdownOpen && (
                <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-20">
                  <Link href="/workspace" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Workspace</Link>
                  <button
                    onClick={() => {
                      logout();
                      setIsDropdownOpen(false);
                    }}
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                  >
                    Log Out
                  </button>
                </div>
              )}
            </div>
          ) : (
            <>
              <Link href="/login" className="text-gray-800 font-['Unbounded'] text-lg">{t('log_in')}</Link>
              <Link href="/start" className="bg-neutral-900 text-neutral-100 rounded-xl px-6 py-2.5 font-['Unbounded'] text-lg">{t('start_for_free')}</Link>
            </>
          )}
        </div>
      </nav>
    </header>
  );
};

export default Header;

===== .\src\components\Hero.tsx =====
"use client";

import type { FC } from 'react';
import Image from 'next/image';
import { useTranslations } from 'next-intl';

const Hero: FC = () => {
  const t = useTranslations('Hero');

  return (
    <section className="relative pt-40 pb-20">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex flex-col lg:flex-row items-center">
        {/* Left Content */}
        <div className="lg:w-1/2 text-left">
          <h1 className="text-6xl font-bold font-['Unbounded'] capitalize text-neutral-900">
            {t('title')}
          </h1>
          <p className="mt-6 text-lg font-['Inter'] text-neutral-900 max-w-lg">
            {t('description')}
          </p>
          <div className="mt-8 flex items-center space-x-4">
            <button className="bg-blue-900 text-white text-xl font-semibold font-['Unbounded'] tracking-wide rounded-[30px] px-12 py-4">
              {t('start_for_free')}
            </button>
            <button className="bg-neutral-900 text-neutral-100 text-xl font-semibold font-['Unbounded'] tracking-wide rounded-[30px] px-12 py-4 flex items-center">
              {t('explore')}
              <div className="ml-2 w-7 h-7 flex items-center justify-center">
                 <div className="w-0 h-0 border-t-[7px] border-t-transparent border-l-[10px] border-l-neutral-100 border-b-[7px] border-b-transparent"></div>
              </div>
            </button>
          </div>
        </div>

        {/* Right Image */}
        <div className="lg:w-1/2 mt-12 lg:mt-0 relative flex justify-center items-center lg:pl-60">
          <div className="w-96 h-[520px] bg-gradient-to-l from-zinc-900 via-gray-400 to-zinc-900 rounded-[20px] relative">
             <Image 
                src="/landing-page/untiltlsed 3.png" 
                alt="Featured 3D Model" 
                width={368} 
                height={465}
                className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 object-cover rounded-xl"
             />
          </div>
        </div>
      </div>
    </section>
  );
};

export default Hero;

===== .\src\components\ImageGallery.tsx =====
"use client";
import type { FC } from 'react';
import Image from 'next/image';
import { useTranslations } from 'next-intl';

interface ImageItem {
  src: string;
  width: number;
  height: number;
  alt: string;
}

const images: ImageItem[] = [
  { src: '/landing-page/image 4.png', width: 413, height: 576, alt: '3D model render' },
  { src: '/landing-page/image 9.png', width: 413, height: 180, alt: '3D model render' },
  { src: '/landing-page/image 10.png', width: 413, height: 592, alt: '3D model render' },
  { src: '/landing-page/image 11.png', width: 413, height: 619, alt: '3D model render' },
  { src: '/landing-page/image 13.png', width: 413, height: 425, alt: '3D model render' },
  { src: '/landing-page/image 14.png', width: 413, height: 674, alt: '3D model render' },
  { src: '/landing-page/image 15.png', width: 413, height: 701, alt: '3D model render' },
  { src: '/landing-page/image 16.png', width: 413, height: 401, alt: '3D model render' },
  { src: '/landing-page/image 17.png', width: 413, height: 592, alt: '3D model render' },
  { src: '/landing-page/image 18.png', width: 413, height: 592, alt: '3D model render' },
  { src: '/landing-page/image 19.png', width: 413, height: 425, alt: '3D model render' },
  { src: '/landing-page/image 20.png', width: 413, height: 269, alt: '3D model render' },
  { src: '/landing-page/image 21.png', width: 413, height: 619, alt: '3D model render' },
  { src: '/landing-page/image 22.png', width: 413, height: 425, alt: '3D model render' },
  { src: '/landing-page/image 23.png', width: 413, height: 592, alt: '3D model render' },
  // Bạn có thể thêm các ảnh còn lại vào đây
];

const ImageGallery: FC = () => {
  const t = useTranslations('ImageGallery');

  return (
    <section className="py-20">
      <div className="text-center max-w-3xl mx-auto px-4">
        <h2 className="text-4xl font-bold font-['Unbounded'] text-neutral-900">{t('title')}</h2>
        <p className="mt-4 text-xl font-['Inter'] text-neutral-900">{t('description')}</p>
      </div>
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-12 columns-1 md:columns-2 lg:columns-3 gap-8">
        {images.map((image) => (
          <div key={image.src} className="mb-8 break-inside-avoid">
            <Image 
              src={image.src} 
              alt={image.alt}
              width={image.width} 
              height={image.height}
              className="rounded-[35px] w-full h-auto"
              sizes="(min-width: 1024px) 33vw, (min-width: 768px) 50vw, 100vw"
            />
          </div>
        ))}
      </div>
      
      <div className="text-center mt-12">
        <button className="bg-neutral-900 text-white text-lg font-medium font-['Unbounded'] rounded-[10px] px-8 py-3">
          {t('load_more')}
        </button>
      </div>
    </section>
  );
};

export default ImageGallery;

===== .\src\components\LanguageSwitcher.tsx =====
"use client";

import { useState, useEffect, useRef } from "react";
import { useLocale } from "next-intl";
import { usePathname, Link } from "../../i18n/navigation";
import { Icon } from '@iconify/react';

export default function LanguageSwitcher() {
  // State để quản lý trạng thái mở/đóng của dropdown
  const [isOpen, setIsOpen] = useState(false);

  // Hook để lấy thông tin ngôn ngữ và đường dẫn
  const locale = useLocale();
  const pathname = usePathname();

  // Ref để tham chiếu đến phần tử div chính của component
  const switcherRef = useRef<HTMLDivElement>(null);

  // Danh sách các ngôn ngữ để dễ dàng mở rộng trong tương lai
  const languages = [
    { code: 'en', name: 'English' },
    { code: 'vi', name: 'Tiếng Việt' }
  ];

  // Logic để đóng dropdown khi người dùng nhấp ra bên ngoài
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (switcherRef.current && !switcherRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    // Thêm event listener khi component được mount
    document.addEventListener('mousedown', handleClickOutside);

    // Dọn dẹp event listener khi component bị unmount
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [switcherRef]);

  return (
    // Container chính, cần 'relative' để định vị menu dropdown
    <div ref={switcherRef} className="relative">
      {/* Nút bấm để mở/đóng dropdown */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center justify-center p-2 rounded-md hover:bg-gray-200 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500"
        aria-haspopup="true"
        aria-expanded={isOpen}
      >
        <Icon icon="ph:globe" className="w-6 h-6 text-gray-700" />
        <span className="mx-2 font-bold font-['Unbounded'] text-gray-800">{locale.toUpperCase()}</span>
        <Icon 
          icon="mdi:chevron-down" 
          className={`w-5 h-5 text-gray-700 transition-transform ${isOpen ? 'rotate-180' : ''}`} 
        />
      </button>

      {/* Menu dropdown */}
      {isOpen && (
        <div 
          className="absolute right-0 mt-2 w-40 bg-white rounded-lg shadow-xl z-20 py-1"
          role="menu"
        >
          {languages.map((lang) => (
            <Link
              key={lang.code}
              href={pathname}
              locale={lang.code}
              onClick={() => setIsOpen(false)} // Đóng dropdown sau khi chọn
              className={`
                block w-full text-left px-4 py-2 text-base text-gray-700 hover:bg-gray-100
                font-['Unbounded']
                ${locale === lang.code ? 'font-bold bg-gray-100' : 'font-normal'}
              `}
              role="menuitem"
            >
              {lang.name}
            </Link>
          ))}
        </div>
      )}
    </div>
  );
}

===== .\src\components\WorkflowCTA.tsx =====
"use client";

import type { FC } from 'react';
import { useTranslations } from 'next-intl';

const WorkflowCTA: FC = () => {
  const t = useTranslations('WorkflowCTA');

  return (
    <section className="py-20 text-center">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 className="text-4xl font-bold font-['Inter'] text-neutral-900">{t('title')}</h2>
        <p className="mt-4 text-xl font-['Inter'] text-neutral-900">
          {t('description')}
        </p>
        <div className="mt-8 flex justify-center items-center space-x-4">
          <button className="bg-blue-900 text-white text-xl font-semibold font-['Unbounded'] tracking-wide rounded-[30px] px-12 py-4">
            {t('start_for_free')}
          </button>
          <button className="bg-neutral-900 text-neutral-100 text-xl font-semibold font-['Unbounded'] tracking-wide rounded-[30px] px-12 py-4 flex items-center">
            {t('explore')}
             <div className="ml-2 w-7 h-7 flex items-center justify-center">
                 <div className="w-0 h-0 border-t-[7px] border-t-transparent border-l-[10px] border-l-neutral-100 border-b-[7px] border-b-transparent"></div>
              </div>
          </button>
        </div>
      </div>
    </section>
  );
};

export default WorkflowCTA;

===== .\src\components\workspace\LibraryPanel.tsx =====
"use client";

import { useState, type FC } from 'react';
import { Icon } from '@iconify/react';
import { useTranslations } from 'next-intl';
import Image from 'next/image';

interface LibraryPanelProps {
  isCollapsed: boolean;
  setIsCollapsed: (isCollapsed: boolean) => void;
}

const LibraryPanel: FC<LibraryPanelProps> = ({ isCollapsed, setIsCollapsed }) => {
  const t = useTranslations('Workspace');

  const libraryItems = Array(15).fill('/landing-page/image 13.png');
  const itemsPerPage = 6;
  const [currentPage, setCurrentPage] = useState(1);
  const totalPages = Math.ceil(libraryItems.length / itemsPerPage);
  const currentItems = libraryItems.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  return (
    // CẬP NHẬT: Định vị tuyệt đối và thêm overflow-hidden
    <aside 
      className={`absolute top-0 right-0 h-full bg-neutral-950 flex flex-col flex-shrink-0 transition-all duration-300 ease-in-out font-['Inter'] overflow-hidden ${
        isCollapsed ? 'w-14 p-2' : 'w-96 p-6'
      }`}
    >
      
      {/* Header (không đổi) */}
      <div className={`flex items-center mb-4 flex-shrink-0 ${isCollapsed ? 'justify-center' : 'justify-between'}`}>
        {!isCollapsed && (
          <h2 className="text-lg font-semibold text-white whitespace-nowrap">{t('my_library')}</h2>
        )}
        <button
          onClick={() => setIsCollapsed(!isCollapsed)}
          className="text-gray-400 hover:text-white"
          aria-label={isCollapsed ? 'Expand panel' : 'Collapse panel'}
        >
          <Icon icon={isCollapsed ? "mdi:arrow-left" : "mdi:arrow-right"} width={20} />
        </button>
      </div>

      {/* Wrapper chống reflow cho nội dung mở rộng */}
      <div className={`transition-opacity duration-200 ease-in-out ${isCollapsed ? 'opacity-0' : 'opacity-100'}`}>
        <div className="w-[calc(24rem-3rem)] flex flex-col flex-grow gap-y-5" style={{height: 'calc(100vh - 4.5rem)'}}>
          <div className="flex items-center gap-x-4">
            <div className="relative flex-grow">
              <Icon 
                icon="mdi:search" 
                className="absolute left-4 top-1/2 -translate-y-1/2 w-6 h-6 text-gray-400" 
              />
              <input 
                type="text" 
                placeholder={t('search')}
                className="w-full h-12 bg-neutral-800 rounded-lg pl-12 pr-4 text-base text-white placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-700"
              />
            </div>
            <button className="w-36 h-12 bg-blue-800 rounded-lg text-base font-semibold text-white flex items-center justify-center gap-x-2 hover:bg-blue-700 transition-colors flex-shrink-0">
              <Icon icon="mdi:upload" className="w-6 h-6" />
              {t('upload')}
            </button>
          </div>

          <div className="h-12 bg-neutral-800 rounded-lg flex items-center justify-between px-4">
              <Icon icon="mdi:folder-outline" className="w-6 h-6 text-white" />
              <Icon icon="mdi:arrow-expand-all" className="w-5 h-5 text-white" />
          </div>

          <div className="flex-grow bg-neutral-900 rounded-xl p-4 flex flex-col min-h-0">
            <div className="flex-grow overflow-y-auto pr-2">
              <div className="grid grid-cols-3 gap-4">
                {currentItems.map((src, index) => (
                  <div key={index} className="w-full aspect-square bg-neutral-800 rounded-xl overflow-hidden relative">
                    <Image 
                      src={src} 
                      alt={`Library item ${index + 1}`} 
                      fill
                      style={{ objectFit: 'cover' }}
                      className="opacity-70"
                    />
                  </div>
                ))}
              </div>
            </div>
          </div>

          <div className="flex items-center justify-center gap-x-2 flex-shrink-0">
              <button 
                onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                disabled={currentPage === 1}
                className="w-9 h-9 bg-neutral-800 rounded-md flex items-center justify-center text-white disabled:opacity-50"
              >
                  <Icon icon="mdi:chevron-left" className="w-6 h-6" />
              </button>
              <div className="px-4 py-1.5 bg-neutral-800 rounded-md text-sm text-white">
                  {currentPage} / {totalPages}
              </div>
              <button 
                onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
                disabled={currentPage === totalPages}
                className="w-9 h-9 bg-neutral-800 rounded-md flex items-center justify-center text-white disabled:opacity-50"
              >
                  <Icon icon="mdi:chevron-right" className="w-6 h-6" />
              </button>
          </div>
        </div>
      </div>


      {/* Dạng thu gọn */}
      <div className={`absolute top-14 left-0 right-0 transition-opacity duration-200 ease-in-out flex flex-col items-center space-y-1 ${isCollapsed ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}>
        <div className="w-10 h-10 flex items-center justify-center rounded-md hover:bg-neutral-800 cursor-pointer" title={t('search')}>
          <Icon icon="mdi:search" className="w-6 h-6 text-gray-300" />
        </div>
        <div className="w-10 h-10 flex items-center justify-center rounded-md hover:bg-neutral-800 cursor-pointer" title={t('upload')}>
          <Icon icon="mdi:upload" className="w-6 h-6 text-gray-300" />
        </div>
        <div className="w-10 h-10 flex items-center justify-center rounded-md hover:bg-neutral-800 cursor-pointer" title={t('my_library')}>
          <Icon icon="mdi:folder-multiple-image" className="w-6 h-6 text-gray-300" />
        </div>
      </div>
    </aside>
  );
};

export default LibraryPanel;

===== .\src\components\workspace\Sidebar.tsx =====
"use client";

import { type FC } from 'react';
import Image from 'next/image';
import { Icon } from '@iconify/react';
import { useTranslations } from 'next-intl';

interface SidebarProps {
  isCollapsed: boolean;
  setIsCollapsed: (isCollapsed: boolean) => void;
  isSidebarOpen: boolean;
  setIsSidebarOpen: (isOpen: boolean) => void;
}

const Sidebar: FC<SidebarProps> = ({ isCollapsed, setIsCollapsed, isSidebarOpen, setIsSidebarOpen }) => {
  const t = useTranslations('Sidebar');
  const tWorkspace = useTranslations('Workspace');

  const NavItem = ({ icon, text }: { icon: string; text: string }) => (
    <a
      href="#"
      className={`block flex items-center rounded-md hover:bg-neutral-800 transition-colors ${
        isCollapsed ? 'w-10 h-10 justify-center' : 'p-2 text-neutral-100'
      }`}
    >
      <Icon icon={icon} className="w-6 h-6 text-gray-300 flex-shrink-0" />
      {!isCollapsed && <span className="ml-3 text-sm font-medium whitespace-nowrap">{text}</span>}
    </a>
  );

  return (
    <>
      <div
        className={`fixed inset-0 bg-black/60 z-40 lg:hidden transition-opacity ${
          isSidebarOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'
        }`}
        onClick={() => setIsSidebarOpen(false)}
        aria-hidden="true"
      />

      <div
        className={`
          bg-neutral-950 text-white flex flex-col h-full z-50
          transition-all duration-300 ease-in-out font-['Inter']
          ${isCollapsed ? 'w-14' : 'w-96'} {/* Cập nhật chiều rộng khi mở rộng */}
          fixed lg:relative top-0 left-0 
          ${isSidebarOpen ? 'translate-x-0' : '-translate-x-full'}
          lg:translate-x-0
        `}
      >
        <div className={`flex flex-col flex-grow min-h-0 ${isCollapsed ? 'p-2' : 'p-4'}`}>
           {/* Header */}
          <div className={`flex items-center mb-6 ${isCollapsed ? 'justify-center flex-col space-y-4' : 'justify-between'}`}>
            {!isCollapsed && <Image src="/logo/light.png" alt="Logo" width={40} height={25} />}
            {isCollapsed && <Image src="/logo/light.png" alt="Logo" width={30} height={19} />}

            <button onClick={() => setIsCollapsed(!isCollapsed)} className="hidden lg:block text-gray-400 hover:text-white">
              <Icon icon={isCollapsed ? "mdi:arrow-right" : "mdi:arrow-left"} width={20} />
            </button>
            <button onClick={() => setIsSidebarOpen(false)} className={`lg:hidden text-white ${isCollapsed ? 'hidden' : ''}`}>
              <Icon icon="mdi:close" width={28} />
            </button>
          </div>
          
          {/* Nav Items */}
          <nav className={`${isCollapsed ? 'flex flex-col items-center space-y-1' : ''}`}>
            <NavItem icon="mdi:plus-box" text={tWorkspace('new_project')} />
            <NavItem icon="mdi:folder-multiple-image" text={tWorkspace('your_library')} />
            <NavItem icon="mdi:crown" text={tWorkspace('upgrade_account')} />
          </nav>
          
          {/* ====== NỘI DUNG CHI TIẾT KHI MỞ RỘNG ====== */}
          {!isCollapsed && (
            <div className="flex flex-col flex-grow overflow-y-auto mt-4 pr-1">
              <hr className="border-zinc-700 mb-4" />
              
              {/* Mode Toggle */}
              <div className="flex bg-neutral-800 rounded-xl p-1 mb-6">
                <button className="flex-1 p-2 rounded-lg text-neutral-400 font-bold text-sm">{t('text_to_3d')}</button>
                <button className="flex-1 p-2 bg-blue-800 text-white rounded-lg font-bold text-sm">{t('image_to_3d')}</button>
              </div>

              {/* Image Uploader */}
              <div className="mb-5">
                <label className="text-sm font-normal mb-2 block">{t('image_label')}</label>
                <div className="w-full h-40 bg-neutral-900 border border-neutral-700 rounded-xl flex flex-col justify-center items-center text-center p-4">
                  <Icon icon="icon-park-outline:upload-picture" className="w-10 h-10 text-neutral-500 mb-2" />
                  <p className="text-neutral-400 text-base font-semibold">{t('uploader_title')}</p>
                  <p className="text-neutral-500 text-xs font-normal mt-1">{t('uploader_formats')}</p>
                </div>
              </div>

              {/* Project Name */}
              <div className="mb-5">
                <label className="text-sm font-normal mb-2 block">{t('name_label')}</label>
                <input
                  type="text"
                  placeholder={t('name_placeholder')}
                  className="w-full h-11 bg-neutral-800 rounded-xl px-4 text-neutral-400 text-sm focus:outline-none focus:ring-2 focus:ring-blue-700"
                />
              </div>

              {/* AI Model */}
              <div className="mb-5">
                <label className="text-sm font-normal mb-2 block">{t('model_label')}</label>
                <div className="flex items-center justify-between p-2 h-11 bg-neutral-800 rounded-xl">
                  <span className="text-white text-sm">V2R</span>
                  <Icon icon="mdi:chevron-down" className="text-white w-5 h-5" />
                </div>
              </div>

              {/* Symmetry */}
              <div className="mb-6">
                <label className="text-sm font-normal mb-2 block">{t('symmetry_label')}</label>
                <div className="flex bg-neutral-800 rounded-lg p-1">
                  <button className="flex-1 text-neutral-400 font-bold p-1.5 text-sm rounded-md">{t('symmetry_off')}</button>
                  <button className="flex-1 bg-blue-800 text-white rounded-md font-bold p-1.5 text-sm">{t('symmetry_auto')}</button>
                  <button className="flex-1 text-neutral-400 font-bold p-1.5 text-sm rounded-md">{t('symmetry_on')}</button>
                </div>
              </div>

              {/* Cost Info */}
              <div className="flex justify-center items-center space-x-3 mb-4 text-sm font-light text-neutral-300">
                <span>{t('cost_info_model')}</span>
                <div className="w-px h-5 bg-neutral-600"></div>
                <span>{t('cost_info_tokens')}</span>
              </div>

              {/* Generate Button */}
              <button className="w-full h-11 bg-blue-800 rounded-xl text-neutral-100 text-base font-semibold font-['Unbounded'] hover:bg-blue-700 transition-colors">
                {t('generate_button')}
              </button>
            </div>
          )}
        </div>

        {/* User Profile Section */}
        <div className={`border-t border-zinc-700 flex-shrink-0 ${isCollapsed ? 'p-2' : 'p-4'}`}>
          <div className={`flex items-center ${isCollapsed ? 'justify-center' : ''}`}>
            <div className="w-10 h-10 bg-zinc-300 rounded-full flex items-center justify-center flex-shrink-0">
              <Icon icon="mdi:user" className="w-6 h-6 text-black" />
            </div>
            {!isCollapsed && (
              <div className="ml-3">
                <p className="text-sm font-semibold text-white">PhuongBT</p>
                <p className="text-sm font-light text-gray-300">{tWorkspace('user_free_tier')}</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default Sidebar;

===== .\src\components\workspace\ViewPanel.tsx =====
"use client";

import { Suspense, type FC, useEffect, useRef } from 'react';
import { Canvas, useFrame, useThree } from '@react-three/fiber';
import { OrbitControls, useGLTF, Html, Environment, Grid, Edges } from '@react-three/drei';
import { useControls, Leva } from 'leva';
import * as THREE from 'three';

// --- TYPE GUARD ---
function isMesh(obj: THREE.Object3D): obj is THREE.Mesh {
  return (obj as THREE.Mesh).isMesh;
}


// --- CÁC COMPONENT PHỤ ---

const Loader: FC = () => {
  return (
    <Html center>
      <div className="text-white text-lg font-sans">Loading 3D Model...</div>
    </Html>
  );
};

const Model: FC = () => {
  const { scene } = useGLTF('/3D-model/model.glb');
  return <primitive object={scene} />;
};

interface WireframeProps {
  show: boolean;
  thickness: number;
  color: string;
}
const ModelWireframe: FC<WireframeProps> = ({ show, thickness, color }) => {
  const { nodes } = useGLTF('/3D-model/model.glb');
  if (!show) return null;

  return (
    <>
      {Object.values(nodes).map((node: THREE.Object3D, index) => (
        isMesh(node) && (
          <mesh key={index} geometry={node.geometry}>
            <meshBasicMaterial transparent opacity={0} /> 
            <Edges
              scale={1}
              threshold={15}
              color={color}
              linewidth={thickness}
            />
          </mesh>
        )
      ))}
    </>
  );
};

interface ModelRendererProps {
  scale: number;
  rotation: [number, number, number];
  autoRotate: boolean;
  showWireframe: boolean;
  polyThickness: number;
  polyColor: string;
}
const ModelRenderer: FC<ModelRendererProps> = (props) => {
  const groupRef = useRef<THREE.Group>(null!);

  useFrame((state, delta) => {
    if (props.autoRotate && groupRef.current) {
      groupRef.current.rotation.y += delta * 0.2;
    }
  });

  return (
    <group ref={groupRef} scale={props.scale} rotation={props.rotation}>
      <Model />
      <ModelWireframe 
        show={props.showWireframe}
        thickness={props.polyThickness}
        color={props.polyColor}
      />
    </group>
  );
};

useGLTF.preload('/3D-model/model.glb');

const CameraUpdater: FC<{ fov: number }> = ({ fov }) => {
  const { camera } = useThree();
  useEffect(() => {
    if (camera instanceof THREE.PerspectiveCamera) {
      camera.fov = fov;
      camera.updateProjectionMatrix();
    }
  }, [fov, camera]);
  return null;
};

const environmentOptions = ['city', 'sunset', 'dawn', 'park', 'apartment', 'studio', 'warehouse'] as const;
type EnvironmentPreset = typeof environmentOptions[number];


// --- COMPONENT CHÍNH ---

const ViewPanel: FC = () => {
  const sceneControls = useControls('Scene', {
    backgroundColor: '#000000',
    environment: { value: 'city', options: environmentOptions },
    intensity: { value: 0.8, min: 0, max: 2, step: 0.1 },
  });

  const modelControls = useControls('Model', {
    scale: { value: 1, min: 0.1, max: 5, step: 0.05 },
    rotation: [0, 0, 0],
  });

  const cameraControls = useControls('Camera', {
    fov: { value: 45, min: 10, max: 120, step: 1 },
  });

  const helperControls = useControls('Helpers', {
    autoRotate: true,
    showGrid: true,
    showWireframe: false,
    polyThickness: {
      value: 1,
      min: 0.1,
      max: 10,
      step: 0.1,
      render: (get) => get('Helpers.showWireframe'),
    },
    polyColor: {
      value: '#ffffff',
      render: (get) => get('Helpers.showWireframe'),
    },
  });

  return (
    <div className="flex-grow h-full bg-neutral-900 relative">
      {/* CẬP NHẬT: Áp dụng các lớp responsive cho Leva panel */}
      <div className="absolute bottom-4 left-4 right-4 md:left-1/2 md:right-auto md:w-[300px] md:-translate-x-1/2 z-10">
        <Leva 
          fill 
          oneLineLabels 
          collapsed 
        />
      </div>

      <Canvas 
        dpr={[1, 2]} 
        camera={{ position: [0, 1.5, 6] }} 
        style={{ position: "absolute", width: '100%', height: '100%' }} // Đảm bảo Canvas fill parent
        shadows
      >
        <color attach="background" args={[sceneControls.backgroundColor]} />
        <CameraUpdater fov={cameraControls.fov} />

        <ambientLight intensity={sceneControls.intensity / 2} />
        <directionalLight position={[5, 5, 5]} intensity={1} castShadow />
        <Environment preset={sceneControls.environment as EnvironmentPreset} />
        
        {helperControls.showGrid && (
          <Grid
            infiniteGrid
            position={[0, -0.5, 0]}
            sectionSize={1}
            cellSize={0.5}
            sectionColor={"#444444"}
            cellColor={"#222222"}
            fadeDistance={25}
            fadeStrength={1}
          />
        )}

        <Suspense fallback={<Loader />}>
          <ModelRenderer 
            scale={modelControls.scale}
            rotation={modelControls.rotation}
            autoRotate={helperControls.autoRotate}
            showWireframe={helperControls.showWireframe}
            polyThickness={helperControls.polyThickness}
            polyColor={helperControls.polyColor}
          />
        </Suspense>
        
        <OrbitControls makeDefault />
      </Canvas>
    </div>
  );
};

export default ViewPanel;

===== .\src\context\AuthContext.tsx =====
"use client";

import { createContext, useContext, useState, ReactNode } from 'react';
import { useRouter } from '../../i18n/navigation';

// Định nghĩa các giá trị mà Context sẽ cung cấp
interface AuthContextType {
  isAuthenticated: boolean;
  login: () => void;
  logout: () => void;
}

// Tạo Context với giá trị mặc định
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Tạo Provider component
export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const router = useRouter();

  const login = () => {
    // Trong một ứng dụng thực tế, bạn sẽ xử lý logic đăng nhập ở đây
    // Sau đó cập nhật trạng thái và chuyển hướng
    setIsAuthenticated(true);
    router.push('/workspace'); // Chuyển hướng đến trang workspace sau khi đăng nhập
  };

  const logout = () => {
    setIsAuthenticated(false);
    router.push('/'); // Chuyển hướng về trang chủ sau khi đăng xuất
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

// Tạo một custom hook để dễ dàng sử dụng Context
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

===== DIRECTORY TREE =====
./
    .eslintrc.json
    eslint.config.mjs
    next-env.d.ts
    next.config.ts
    package.json
    postcss.config.mjs
    README.md
    tailwind.config.ts
    tsconfig.json
    i18n/
        navigation.ts
        request.ts
        routing.ts
    messages/
        en.json
        vi.json
    public/
        3D-model/
            model.glb
        landing-page/
            image 10.png
            image 11.png
            image 13.png
            image 14.png
            image 15.png
            image 16.png
            image 17.png
            image 18.png
            image 19.png
            image 20.png
            image 21.png
            image 22.png
            image 23.png
            image 24.png
            image 25.png
            image 26.png
            image 4.png
            image 9.png
            untiltlsed 3.png
        logo/
            dark.png
            light.png
    src/
        middleware.ts
        app/
            globals.css
            providers.tsx
            [locale]/
                layout.tsx
                page.tsx
                login/
                    page.tsx
                register/
                    page.tsx
                workspace/
                    page.tsx
        components/
            Footer.tsx
            Header.tsx
            Hero.tsx
            ImageGallery.tsx
            LanguageSwitcher.tsx
            WorkflowCTA.tsx
            workspace/
                LibraryPanel.tsx
                Sidebar.tsx
                ViewPanel.tsx
        context/
            AuthContext.tsx
    utils/
