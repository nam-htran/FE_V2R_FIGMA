
===== .\.eslintrc.json =====
// ===== .\.eslintrc.json =====
{
  "extends": "next/core-web-vitals",
  "rules": {
    // Tắt quy tắc yêu cầu escape các ký tự đặc biệt như ' và " trong JSX.
    // Đây là lỗi chính khiến build thất bại.
    "react/no-unescaped-entities": "off",

    // Tắt quy tắc cấm sử dụng kiểu 'any'.
    // Điều này sẽ giải quyết các lỗi '@typescript-eslint/no-explicit-any'.
    "@typescript-eslint/no-explicit-any": "off",
    
    // Chuyển cảnh báo về biến không sử dụng thành "warning" thay vì "error".
    // Build sẽ không thất bại vì cảnh báo này nữa.
    "@typescript-eslint/no-unused-vars": "warn",

    // Tắt quy tắc yêu cầu interface không được rỗng.
    "@typescript-eslint/no-empty-interface": "off",

    // Tắt cảnh báo về việc dùng <img> thay vì <Image /> của Next.js.
    // Bạn có thể bật lại sau khi đã tối ưu hóa tất cả các ảnh.
    "@next/next/no-img-element": "off"
  }
}

===== .\next-env.d.ts =====
/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference path="./.next/types/routes.d.ts" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


===== .\next.config.ts =====
import type { NextConfig } from "next";
import createNextIntlPlugin from "next-intl/plugin";

const nextConfig: NextConfig = {
  eslint: {ignoreDuringBuilds: true},
};

const withNextIntl = createNextIntlPlugin();

export default withNextIntl(nextConfig);


===== .\package.json =====
{
  "name": "my-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build --turbopack",
    "start": "next start",
    "lint": "eslint"
  },
  "dependencies": {
    "@iconify/react": "^6.0.2",
    "@react-three/drei": "^10.7.6",
    "@react-three/fiber": "^9.3.0",
    "leva": "^0.10.0",
    "next": "15.5.4",
    "next-intl": "^4.3.9",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "three": "^0.180.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.5.4",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}


===== .\tailwind.config.ts =====
// tailwind.config.js or tailwind.config.ts
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        // Cú pháp này cho phép bạn dùng class như font-inter, font-unbounded
        inter: ['var(--font-inter)', 'sans-serif'],
        unbounded: ['var(--font-unbounded)', 'sans-serif'],
        'be-vietnam-pro': ['var(--font-be-vietnam-pro)', 'sans-serif'],
      },
    },
  },
  plugins: [],
}

===== .\tsconfig.json =====
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


===== .\i18n\request.ts =====
import {hasLocale} from 'next-intl';
import {getRequestConfig} from 'next-intl/server';
import {routing} from './routing';

export default getRequestConfig(async ({requestLocale}) => {
  // Typically corresponds to the `[locale]` segment
  const requested = await requestLocale;
  const locale = hasLocale(routing.locales, requested)
    ? requested
    : routing.defaultLocale;

  return {
    locale,
    messages: (await import(`../../messages/${locale}.json`)).default
  };
});

===== .\i18n\routing.ts =====
import {defineRouting} from 'next-intl/routing';

export const routing = defineRouting({
  locales: ['en', 'vi'],
  defaultLocale: 'vi',
  pathnames: {
    '/': '/',
    '/pathnames': {
      vi: '/pfadnamen'
    }
  }
});

===== .\messages\en.json =====
{
  "Header": {
    "home": "Home",
    "community": "Community",
    "features": "Features",
    "pricing": "Pricing",
    "log_in": "Log In",
    "start_for_free": "Start For Free"
  },
  "Hero": {
    "title": "The NO.1 AI 3D Model Generator for Everyone",
    "description": "Convert your photos or concept art images into 3D models with stunning details in just a matter of seconds.",
    "start_for_free": "START FOR FREE",
    "explore": "EXPLORE"
  },
  "ImageGallery": {
    "title": "Step into the World of 3D Imagination",
    "description": "Discover and download a variety of unique 3D models from our vibrant community.",
    "load_more": "Load more"
  },
  "WorkflowCTA": {
    "title": "Unlock a faster 3D workflow",
    "description": "Transform your design process with V2R. Try it now and see your creativity come to life effortlessly!",
    "start_for_free": "START FOR FREE",
    "explore": "EXPLORE"
  },
  "Footer": {
    "subscribe_title": "Subscribe to updates",
    "subscribe_description": "Join our newsletter to stay updated on latest news",
    "email_placeholder": "Enter your email",
    "subscribe_button": "Subscribe",
    "features_title": "Features",
    "text_to_3d": "Text to 3D",
    "image_to_3d": "Image to 3D",
    "product_title": "Product",
    "pricing": "Pricing",
    "community": "Community",
    "plugin": "Plugin",
    "status": "Status",
    "company_title": "Company",
    "about": "About",
    "contact": "Contact"
  },
  "Sidebar": {
    "text_to_3d": "Text to 3D",
    "image_to_3d": "Image to 3D",
    "image_label": "Image",
    "uploader_title": "Your Image Here",
    "uploader_formats": "Formats: .png, .jpg, .jpeg, .webp",
    "name_label": "Name",
    "name_placeholder": "Untitled Project",
    "model_label": "AI Model",
    "symmetry_label": "Symmetry",
    "symmetry_off": "Off",
    "symmetry_auto": "Auto",
    "symmetry_on": "On",
    "cost_info_model": "1 model",
    "cost_info_tokens": "10 tokens",
    "generate_button": "Generate"
  }
}

===== .\messages\vi.json =====
{
  "Header": {
    "home": "Trang chủ",
    "community": "Cộng đồng",
    "features": "Tính năng",
    "pricing": "Bảng giá",
    "log_in": "Đăng nhập",
    "start_for_free": "Bắt đầu miễn phí"
  },
  "Hero": {
    "title": "Trình Tạo Mô Hình 3D AI SỐ 1 Cho Mọi Người",
    "description": "Chuyển đổi ảnh hoặc hình ảnh concept của bạn thành mô hình 3D với chi tiết tuyệt đẹp chỉ trong vài giây.",
    "start_for_free": "BẮT ĐẦU MIỄN PHÍ",
    "explore": "KHÁM PHÁ"
  },
  "ImageGallery": {
    "title": "Bước vào Thế giới Tưởng tượng 3D",
    "description": "Khám phá và tải xuống nhiều mô hình 3D độc đáo từ cộng đồng sôi động của chúng tôi.",
    "load_more": "Tải thêm"
  },
  "WorkflowCTA": {
    "title": "Mở khóa quy trình làm việc 3D nhanh hơn",
    "description": "Thay đổi quy trình thiết kế của bạn với V2R. Hãy thử ngay bây giờ và chứng kiến sự sáng tạo của bạn trở nên sống động một cách dễ dàng!",
    "start_for_free": "BẮT ĐẦU MIỄN PHÍ",
    "explore": "KHÁM PHÁ"
  },
  "Footer": {
    "subscribe_title": "Đăng ký nhận thông tin cập nhật",
    "subscribe_description": "Tham gia bản tin của chúng tôi để luôn cập nhật những tin tức mới nhất",
    "email_placeholder": "Nhập email của bạn",
    "subscribe_button": "Đăng ký",
    "features_title": "Tính năng",
    "text_to_3d": "Văn bản sang 3D",
    "image_to_3d": "Hình ảnh sang 3D",
    "product_title": "Sản phẩm",
    "pricing": "Bảng giá",
    "community": "Cộng đồng",
    "plugin": "Plugin",
    "status": "Trạng thái",
    "company_title": "Công ty",
    "about": "Về chúng tôi",
    "contact": "Liên hệ"
  },
  "Sidebar": {
    "text_to_3d": "Văn bản sang 3D",
    "image_to_3d": "Hình ảnh sang 3D",
    "image_label": "Hình ảnh",
    "uploader_title": "Hình ảnh của bạn ở đây",
    "uploader_formats": "Định dạng: .png, .jpg, .jpeg, .webp",
    "name_label": "Tên",
    "name_placeholder": "Dự án chưa có tên",
    "model_label": "Mô hình AI",
    "symmetry_label": "Đối xứng",
    "symmetry_off": "Tắt",
    "symmetry_auto": "Tự động",
    "symmetry_on": "Bật",
    "cost_info_model": "1 mô hình",
    "cost_info_tokens": "10 tokens",
    "generate_button": "Tạo"
  }
}

===== .\src\middleware.ts =====
// src/middleware.ts
import createMiddleware from 'next-intl/middleware';

export default createMiddleware({
  locales: ['en', 'vi'],
  defaultLocale: 'en'
});

export const config = {
  matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)']
};


===== .\src\app\globals.css =====
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}


===== .\src\app\[locale]\layout.tsx =====
// app/layout.tsx
import type { Metadata } from 'next';
import { Inter, Unbounded, Be_Vietnam_Pro } from 'next/font/google';
import '../globals.css';
import { NextIntlClientProvider } from 'next-intl';
import { getMessages } from 'next-intl/server';

// Font setup
const inter = Inter({ subsets: ['latin'], variable: '--font-inter' });
const unbounded = Unbounded({ subsets: ['latin'], variable: '--font-unbounded' });
const beVietnamPro = Be_Vietnam_Pro({ 
  subsets: ['latin'], 
  weight: ['400', '600', '700'],
  variable: '--font-be-vietnam-pro'
});

export const metadata: Metadata = {
  title: 'Vision2Realty',
  description: 'The NO.1 AI 3D Model Generator for Everyone',
};

// Định nghĩa kiểu cho props của layout
interface RootLayoutProps {
  children: React.ReactNode;
  params: { locale: string };
}

export default async function RootLayout({ children, params }: RootLayoutProps) {
  const messages = await getMessages();
  return (
    <html lang={params.locale}>
      <body className={`${inter.variable} ${unbounded.variable} ${beVietnamPro.variable} bg-stone-50 font-inter`}>
        <NextIntlClientProvider locale={params.locale} messages={messages}>
        <main>{children}</main>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}

===== .\src\app\[locale]\page.tsx =====
"use client";

import Footer from "@/components/Footer";
import Hero from "@/components/Hero";
import ImageGallery from "@/components/ImageGallery";
import WorkflowCTA from "@/components/WorkflowCTA";
import Header from "@/components/Header";

export default function Home() {
  return (
    <>
      <Header />
      <Hero />
      <ImageGallery />
      <WorkflowCTA />
      <Footer />
    </>
  );
}

===== .\src\app\[locale]\workspace\page.tsx =====
"use client"; // Chuyển thành Client Component để sử dụng hooks

import { useState } from "react";
import { Icon } from "@iconify/react";
import Sidebar from "@/components/workspace/Sidebar";
import ViewPanel from "@/components/workspace/ViewPanel";

export default function WorkspacePage() {
  // State để quản lý trạng thái đóng/mở của sidebar
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);

  return (
    // Thêm 'relative' để định vị nút hamburger
    <main className="relative flex w-screen h-screen overflow-hidden bg-gray-100">
      <Sidebar isSidebarOpen={isSidebarOpen} setIsSidebarOpen={setIsSidebarOpen} />

      {/* Nút Hamburger để mở sidebar trên màn hình nhỏ */}
      {/* Nút này sẽ được ẩn trên màn hình lớn (lg:hidden) */}
      <button
        onClick={() => setIsSidebarOpen(true)}
        className="absolute top-4 left-4 z-30 lg:hidden p-2 bg-gray-700/50 text-white rounded-md"
        aria-label="Open sidebar"
      >
        <Icon icon="mdi:menu" width={24} />
      </button>

      {/* ViewPanel giờ đây sẽ nằm trong một container linh hoạt */}
      <div className="flex-1">
        <ViewPanel />
      </div>
    </main>
  );
}

===== .\src\components\Footer.tsx =====
"use client";

import type { FC } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { useTranslations } from 'next-intl';

const Footer: FC = () => {
  const t = useTranslations('Footer');

  return (
    <footer className="relative bg-gradient-to-b from-stone-50 to-blue-800 rounded-t-3xl pt-24 pb-12">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 grid grid-cols-1 md:grid-cols-4 lg:grid-cols-5 gap-8 text-neutral-900">
        {/* Subscription */}
        <div className="lg:col-span-2">
          <h3 className="text-xl font-semibold font-['Unbounded']">{t('subscribe_title')}</h3>
          <p className="mt-2 text-lg font-['Inter']">{t('subscribe_description')}</p>
          <form className="mt-4 flex flex-col sm:flex-row gap-4">
            <input 
              type="email" 
              placeholder={t('email_placeholder')}
              className="w-full sm:w-80 h-11 px-4 rounded-[10px] bg-white text-stone-500 font-['Inter']" 
            />
            <button className="bg-blue-800 text-white text-lg font-medium font-['Unbounded'] rounded-[10px] h-11 px-8">
              {t('subscribe_button')}
            </button>
          </form>
        </div>
        
        {/* Links */}
        <div>
          <h3 className="text-xl font-semibold font-['Unbounded']">{t('features_title')}</h3>
          <ul className="mt-4 space-y-2 text-lg font-['Inter']">
            <li><Link href="/features#text-to-3d">{t('text_to_3d')}</Link></li>
            <li><Link href="/features#image-to-3d">{t('image_to_3d')}</Link></li>
          </ul>
        </div>

        <div>
          <h3 className="text-xl font-semibold font-['Unbounded']">{t('product_title')}</h3>
          <ul className="mt-4 space-y-2 text-lg font-['Inter']">
            <li><Link href="/pricing">{t('pricing')}</Link></li>
            <li><Link href="/community">{t('community')}</Link></li>
            <li><Link href="/plugin">{t('plugin')}</Link></li>
            <li><Link href="/status">{t('status')}</Link></li>
          </ul>
        </div>

        <div>
          <h3 className="text-xl font-semibold font-['Unbounded']">{t('company_title')}</h3>
          <ul className="mt-4 space-y-2 text-lg font-['Inter']">
            <li><Link href="/about">{t('about')}</Link></li>
            <li><Link href="/contact">{t('contact')}</Link></li>
          </ul>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-16 flex justify-between items-center">
         <Image src="/logo/dark.png" alt="Logo" width={90} height={56} />
      </div>
    </footer>
  );
};

export default Footer;

===== .\src\components\Header.tsx =====
"use client";

import Image from 'next/image';
import Link from 'next/link';
import { useTranslations } from 'next-intl';

const Header = () => {
  const t = useTranslations('Header');

  return (
    <header className="absolute top-0 left-0 w-full z-10">
      <nav className="flex items-center justify-between max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-24">
        <div className="flex items-center">
          <Link href="/">
            <Image src="/logo/dark.png" alt="Logo" width={90} height={56} />
          </Link>
        </div>
        <div className="hidden md:flex items-center space-x-8 text-gray-800 font-['Unbounded'] text-lg">
          <Link href="/" className="bg-neutral-900 text-neutral-100 rounded-xl px-6 py-2.5 font-bold">{t('home')}</Link>
          <Link href="/community">{t('community')}</Link>
          <Link href="/features">{t('features')}</Link>
          <Link href="/pricing">{t('pricing')}</Link>
        </div>
        <div className="hidden md:flex items-center space-x-4">
          <Link href="/login" className="text-gray-800 font-['Unbounded'] text-lg">{t('log_in')}</Link>
          <Link href="/start" className="bg-neutral-900 text-neutral-100 rounded-xl px-6 py-2.5 font-['Unbounded'] text-lg">{t('start_for_free')}</Link>
        </div>
      </nav>
    </header>
  );
};

export default Header;

===== .\src\components\Hero.tsx =====
"use client";

import type { FC } from 'react';
import Image from 'next/image';
import { useTranslations } from 'next-intl';

const Hero: FC = () => {
  const t = useTranslations('Hero');

  return (
    <section className="relative pt-40 pb-20">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex flex-col lg:flex-row items-center">
        {/* Left Content */}
        <div className="lg:w-1/2 text-left">
          <h1 className="text-6xl font-bold font-['Unbounded'] capitalize text-neutral-900">
            {t('title')}
          </h1>
          <p className="mt-6 text-lg font-['Inter'] text-neutral-900 max-w-lg">
            {t('description')}
          </p>
          <div className="mt-8 flex items-center space-x-4">
            <button className="bg-blue-900 text-white text-xl font-semibold font-['Unbounded'] tracking-wide rounded-[30px] px-12 py-4">
              {t('start_for_free')}
            </button>
            <button className="bg-neutral-900 text-neutral-100 text-xl font-semibold font-['Unbounded'] tracking-wide rounded-[30px] px-12 py-4 flex items-center">
              {t('explore')}
              <div className="ml-2 w-7 h-7 flex items-center justify-center">
                 <div className="w-0 h-0 border-t-[7px] border-t-transparent border-l-[10px] border-l-neutral-100 border-b-[7px] border-b-transparent"></div>
              </div>
            </button>
          </div>
        </div>

        {/* Right Image */}
        <div className="lg:w-1/2 mt-12 lg:mt-0 relative flex justify-center items-center lg:pl-60">
          <div className="w-96 h-[520px] bg-gradient-to-l from-zinc-900 via-gray-400 to-zinc-900 rounded-[20px] relative">
             <Image 
                src="/landing-page/untiltlsed 3.png" 
                alt="Featured 3D Model" 
                width={368} 
                height={465}
                className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 object-cover rounded-xl"
             />
          </div>
        </div>
      </div>
    </section>
  );
};

export default Hero;

===== .\src\components\ImageGallery.tsx =====
"use client";
import type { FC } from 'react';
import Image from 'next/image';
import { useTranslations } from 'next-intl';

interface ImageItem {
  src: string;
  width: number;
  height: number;
  alt: string;
}

const images: ImageItem[] = [
  { src: '/landing-page/image 4.png', width: 413, height: 576, alt: '3D model render' },
  { src: '/landing-page/image 9.png', width: 413, height: 180, alt: '3D model render' },
  { src: '/landing-page/image 10.png', width: 413, height: 592, alt: '3D model render' },
  { src: '/landing-page/image 11.png', width: 413, height: 619, alt: '3D model render' },
  { src: '/landing-page/image 13.png', width: 413, height: 425, alt: '3D model render' },
  { src: '/landing-page/image 14.png', width: 413, height: 674, alt: '3D model render' },
  { src: '/landing-page/image 15.png', width: 413, height: 701, alt: '3D model render' },
  { src: '/landing-page/image 16.png', width: 413, height: 401, alt: '3D model render' },
  { src: '/landing-page/image 17.png', width: 413, height: 592, alt: '3D model render' },
  { src: '/landing-page/image 18.png', width: 413, height: 592, alt: '3D model render' },
  { src: '/landing-page/image 19.png', width: 413, height: 425, alt: '3D model render' },
  { src: '/landing-page/image 20.png', width: 413, height: 269, alt: '3D model render' },
  { src: '/landing-page/image 21.png', width: 413, height: 619, alt: '3D model render' },
  { src: '/landing-page/image 22.png', width: 413, height: 425, alt: '3D model render' },
  { src: '/landing-page/image 23.png', width: 413, height: 592, alt: '3D model render' },
  // Bạn có thể thêm các ảnh còn lại vào đây
];

const ImageGallery: FC = () => {
  const t = useTranslations('ImageGallery');

  return (
    <section className="py-20">
      <div className="text-center max-w-3xl mx-auto px-4">
        <h2 className="text-4xl font-bold font-['Unbounded'] text-neutral-900">{t('title')}</h2>
        <p className="mt-4 text-xl font-['Inter'] text-neutral-900">{t('description')}</p>
      </div>
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-12 columns-1 md:columns-2 lg:columns-3 gap-8">
        {images.map((image) => (
          <div key={image.src} className="mb-8 break-inside-avoid">
            <Image 
              src={image.src} 
              alt={image.alt}
              width={image.width} 
              height={image.height}
              className="rounded-[35px] w-full h-auto"
              sizes="(min-width: 1024px) 33vw, (min-width: 768px) 50vw, 100vw"
            />
          </div>
        ))}
      </div>
      
      <div className="text-center mt-12">
        <button className="bg-neutral-900 text-white text-lg font-medium font-['Unbounded'] rounded-[10px] px-8 py-3">
          {t('load_more')}
        </button>
      </div>
    </section>
  );
};

export default ImageGallery;

===== .\src\components\WorkflowCTA.tsx =====
"use client";

import type { FC } from 'react';
import { useTranslations } from 'next-intl';

const WorkflowCTA: FC = () => {
  const t = useTranslations('WorkflowCTA');

  return (
    <section className="py-20 text-center">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 className="text-4xl font-bold font-['Be_Vietnam_Pro'] text-neutral-900">{t('title')}</h2>
        <p className="mt-4 text-xl font-['Robotto'] text-neutral-900">
          {t('description')}
        </p>
        <div className="mt-8 flex justify-center items-center space-x-4">
          <button className="bg-blue-900 text-white text-xl font-semibold font-['Unbounded'] tracking-wide rounded-[30px] px-12 py-4">
            {t('start_for_free')}
          </button>
          <button className="bg-neutral-900 text-neutral-100 text-xl font-semibold font-['Unbounded'] tracking-wide rounded-[30px] px-12 py-4 flex items-center">
            {t('explore')}
             <div className="ml-2 w-7 h-7 flex items-center justify-center">
                 <div className="w-0 h-0 border-t-[7px] border-t-transparent border-l-[10px] border-l-neutral-100 border-b-[7px] border-b-transparent"></div>
              </div>
          </button>
        </div>
      </div>
    </section>
  );
};

export default WorkflowCTA;

===== .\src\components\workspace\Sidebar.tsx =====
"use client";

import { type FC } from 'react';
import Image from 'next/image';
import { Icon } from '@iconify/react';
import { useTranslations } from 'next-intl';

interface SidebarProps {
  isSidebarOpen: boolean;
  setIsSidebarOpen: (isOpen: boolean) => void;
}

const Sidebar: FC<SidebarProps> = ({ isSidebarOpen, setIsSidebarOpen }) => {
  const t = useTranslations('Sidebar');

  return (
    <>
      {/* Lớp phủ (Overlay) */}
      <div
        className={`fixed inset-0 bg-black/60 z-40 lg:hidden transition-opacity ${
          isSidebarOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'
        }`}
        onClick={() => setIsSidebarOpen(false)}
        aria-hidden="true"
      ></div>

      {/* Sidebar */}
      <div
        className={`
          fixed top-0 left-0 h-full bg-black text-white p-6 overflow-y-auto z-50
          transition-transform duration-300 ease-in-out
          w-full sm:w-96 lg:w-[360px]
          lg:relative lg:translate-x-0
          ${isSidebarOpen ? 'translate-x-0' : '-translate-x-full'}
        `}
      >
        {/* Header */}
        <div className="flex justify-between items-center mb-6">
          <Image src="/logo/light.png" alt="Logo" width={40} height={25} />
          <button onClick={() => setIsSidebarOpen(false)} className="lg:hidden text-white">
            <Icon icon="mdi:close" width={28} />
          </button>
        </div>

        {/* Mode Toggle */}
        <div className="flex bg-stone-50 text-black rounded-xl p-1 mb-6">
          <button className="flex-1 p-2.5 rounded-lg text-neutral-400 font-bold text-sm">{t('text_to_3d')}</button>
          <button className="flex-1 p-2.5 bg-blue-900 text-white rounded-lg font-bold text-sm">{t('image_to_3d')}</button>
        </div>

        {/* Image Uploader */}
        <div className="mb-5">
          <label className="text-sm font-normal font-['Inter'] mb-2 block">{t('image_label')}</label>
          <div className="w-full h-60 bg-stone-50 rounded-xl border border-neutral-600 flex flex-col justify-center items-center text-center p-4">
            <Icon icon="icon-park-outline:upload-picture" className="w-12 h-12 text-stone-500 mb-3" />
            <p className="text-stone-500 text-lg font-semibold font-['Inter']">{t('uploader_title')}</p>
            <p className="text-neutral-500 text-xs font-normal font-['Inter'] mt-1">{t('uploader_formats')}</p>
          </div>
        </div>

        {/* Project Name */}
        <div className="mb-5">
          <label className="text-sm font-normal font-['Inter'] mb-2 block">{t('name_label')}</label>
          <input
            type="text"
            placeholder={t('name_placeholder')}
            className="w-full h-12 bg-stone-50 rounded-xl px-4 text-neutral-500 text-sm"
          />
        </div>

        {/* AI Model */}
        <div className="mb-5">
          <label className="text-sm font-normal font-['Inter'] mb-2 block">{t('model_label')}</label>
          <div className="flex items-center justify-between p-1.5 bg-neutral-800 rounded-lg">
            <span className="text-white text-sm">V2R</span>
            <button className="text-xs">▼</button>
          </div>
        </div>

        {/* Symmetry */}
        <div className="mb-6">
          <label className="text-sm font-normal font-['Inter'] mb-2 block">{t('symmetry_label')}</label>
          <div className="flex bg-stone-50 rounded-md p-1">
            <button className="flex-1 text-zinc-600 font-bold p-1.5 text-sm">{t('symmetry_off')}</button>
            <button className="flex-1 bg-blue-900 text-white rounded-md font-bold p-1.5 text-sm">{t('symmetry_auto')}</button>
            <button className="flex-1 text-zinc-600 font-bold p-1.5 text-sm">{t('symmetry_on')}</button>
          </div>
        </div>

        {/* Cost Info */}
        <div className="flex justify-center items-center space-x-3 mb-3 text-sm font-light">
          <span>{t('cost_info_model')}</span>
          <div className="w-px h-5 bg-white"></div>
          <span>{t('cost_info_tokens')}</span>
        </div>

        {/* Generate Button */}
        <button className="w-full h-11 bg-blue-900 rounded-2xl text-neutral-100 text-lg font-semibold font-['Unbounded']">
          {t('generate_button')}
        </button>
      </div>
    </>
  );
};

export default Sidebar;

===== .\src\components\workspace\ViewPanel.tsx =====
// components/workspace/ViewPanel.tsx
"use client";

import { Suspense, type FC, useEffect, useRef } from 'react';
import { Canvas, useFrame, useThree } from '@react-three/fiber';
import { OrbitControls, useGLTF, Html, Environment, Grid, Edges } from '@react-three/drei';
import { useControls, Leva } from 'leva';
import * as THREE from 'three';

// --- TYPE GUARD ---
// Hàm này kiểm tra xem một Object3D có phải là Mesh hay không
// và thông báo cho TypeScript biết điều đó.
function isMesh(obj: THREE.Object3D): obj is THREE.Mesh {
  return (obj as THREE.Mesh).isMesh;
}


// --- CÁC COMPONENT PHỤ ---

// Component Loader hiển thị trong khi chờ tải
const Loader: FC = () => {
  return (
    <Html center>
      <div className="text-white text-lg font-sans">Loading 3D Model...</div>
    </Html>
  );
};

// Component Model đơn giản, chỉ có nhiệm vụ render scene
const Model: FC = () => {
  const { scene } = useGLTF('/3D-model/model.glb');
  return <primitive object={scene} />;
};

// Component Wireframe chuyên render khung lưới
interface WireframeProps {
  show: boolean;
  thickness: number;
  color: string;
}
const ModelWireframe: FC<WireframeProps> = ({ show, thickness, color }) => {
  const { nodes } = useGLTF('/3D-model/model.glb');
  if (!show) return null;

  return (
    <>
      {Object.values(nodes).map((node: THREE.Object3D, index) => (
        // Sử dụng Type Guard để đảm bảo node là một Mesh
        isMesh(node) && (
          <mesh key={index} geometry={node.geometry}>
            <meshBasicMaterial transparent opacity={0} /> 
            <Edges
              scale={1}
              threshold={15}
              color={color}
              linewidth={thickness}
            />
          </mesh>
        )
      ))}
    </>
  );
};

// Component Container: Chứa logic xoay/scale và render cả Model lẫn Wireframe
interface ModelRendererProps {
  scale: number;
  rotation: [number, number, number];
  autoRotate: boolean;
  showWireframe: boolean;
  polyThickness: number;
  polyColor: string;
}
const ModelRenderer: FC<ModelRendererProps> = (props) => {
  const groupRef = useRef<THREE.Group>(null!);

  // Logic tự động xoay được đặt ở đây, áp dụng cho group cha chung
  useFrame((state, delta) => {
    if (props.autoRotate && groupRef.current) {
      groupRef.current.rotation.y += delta * 0.2;
    }
  });

  return (
    <group ref={groupRef} scale={props.scale} rotation={props.rotation}>
      <Model />
      <ModelWireframe 
        show={props.showWireframe}
        thickness={props.polyThickness}
        color={props.polyColor}
      />
    </group>
  );
};

useGLTF.preload('/3D-model/model.glb');

// Component chuyên cập nhật fov của camera
const CameraUpdater: FC<{ fov: number }> = ({ fov }) => {
  const { camera } = useThree();
  useEffect(() => {
    if (camera instanceof THREE.PerspectiveCamera) {
      camera.fov = fov;
      camera.updateProjectionMatrix();
    }
  }, [fov, camera]);
  return null;
};

// Định nghĩa options và types cho Environment
const environmentOptions = ['city', 'sunset', 'dawn', 'park', 'apartment', 'studio', 'warehouse'] as const;
type EnvironmentPreset = typeof environmentOptions[number];


// --- COMPONENT CHÍNH ---

const ViewPanel: FC = () => {
  // Leva controls
  const sceneControls = useControls('Scene', {
    backgroundColor: '#555555',
    environment: { value: 'city', options: environmentOptions },
    intensity: { value: 0.8, min: 0, max: 2, step: 0.1 },
  });

  const modelControls = useControls('Model', {
    scale: { value: 1, min: 0.1, max: 5, step: 0.05 },
    rotation: [0, 0, 0],
  });

  const cameraControls = useControls('Camera', {
    fov: { value: 45, min: 10, max: 120, step: 1 },
  });

  const helperControls = useControls('Helpers', {
    autoRotate: true,
    showGrid: true,
    showWireframe: false,
    polyThickness: {
      value: 1,
      min: 0.1,
      max: 10,
      step: 0.1,
      render: (get) => get('Helpers.showWireframe'),
    },
    polyColor: {
      value: '#ffffff',
      render: (get) => get('Helpers.showWireframe'),
    },
  });

  return (
    <div className="flex-grow h-full bg-neutral-500 relative">
      <Leva collapsed />
      <Canvas 
        dpr={[1, 2]} 
        camera={{ position: [0, 1.5, 6] }} 
        style={{ position: "absolute" }}
        shadows
      >
        <color attach="background" args={[sceneControls.backgroundColor]} />
        <CameraUpdater fov={cameraControls.fov} />

        {/* Ánh sáng và Môi trường */}
        <ambientLight intensity={sceneControls.intensity / 2} />
        <directionalLight position={[5, 5, 5]} intensity={1} castShadow />
        <Environment preset={sceneControls.environment as EnvironmentPreset} />
        
        {/* Lưới nền có thể bật/tắt */}
        {helperControls.showGrid && (
          <Grid
            infiniteGrid
            position={[0, -0.5, 0]}
            sectionSize={1}
            cellSize={0.5}
            sectionColor={"#888888"}
            cellColor={"#555555"}
            fadeDistance={25}
            fadeStrength={1}
          />
        )}

        <Suspense fallback={<Loader />}>
          {/* Sử dụng component container mới */}
          <ModelRenderer 
            scale={modelControls.scale}
            rotation={modelControls.rotation}
            autoRotate={helperControls.autoRotate}
            showWireframe={helperControls.showWireframe}
            polyThickness={helperControls.polyThickness}
            polyColor={helperControls.polyColor}
          />
        </Suspense>
        
        <OrbitControls makeDefault />
      </Canvas>
    </div>
  );
};

export default ViewPanel;

===== DIRECTORY TREE =====
./
    .eslintrc.json
    eslint.config.mjs
    next-env.d.ts
    next.config.ts
    package.json
    postcss.config.mjs
    README.md
    tailwind.config.ts
    tsconfig.json
    i18n/
        request.ts
        routing.ts
    messages/
        en.json
        vi.json
    public/
        3D-model/
            model.glb
        landing-page/
            image 10.png
            image 11.png
            image 13.png
            image 14.png
            image 15.png
            image 16.png
            image 17.png
            image 18.png
            image 19.png
            image 20.png
            image 21.png
            image 22.png
            image 23.png
            image 24.png
            image 25.png
            image 26.png
            image 4.png
            image 9.png
            untiltlsed 3.png
        logo/
            dark.png
            light.png
    src/
        middleware.ts
        app/
            globals.css
            [locale]/
                layout.tsx
                page.tsx
                workspace/
                    page.tsx
        components/
            Footer.tsx
            Header.tsx
            Hero.tsx
            ImageGallery.tsx
            WorkflowCTA.tsx
            workspace/
                Sidebar.tsx
                ViewPanel.tsx
    utils/
