
===== .\.eslintrc.json =====
// ===== .\.eslintrc.json =====
{
  "extends": "next/core-web-vitals",
  "rules": {
    // Tắt quy tắc yêu cầu escape các ký tự đặc biệt như ' và " trong JSX.
    // Đây là lỗi chính khiến build thất bại.
    "react/no-unescaped-entities": "off",

    // Tắt quy tắc cấm sử dụng kiểu 'any'.
    // Điều này sẽ giải quyết các lỗi '@typescript-eslint/no-explicit-any'.
    "@typescript-eslint/no-explicit-any": "off",
    
    // Chuyển cảnh báo về biến không sử dụng thành "warning" thay vì "error".
    // Build sẽ không thất bại vì cảnh báo này nữa.
    "@typescript-eslint/no-unused-vars": "warn",

    // Tắt quy tắc yêu cầu interface không được rỗng.
    "@typescript-eslint/no-empty-interface": "off",

    // Tắt cảnh báo về việc dùng <img> thay vì <Image /> của Next.js.
    // Bạn có thể bật lại sau khi đã tối ưu hóa tất cả các ảnh.
    "@next/next/no-img-element": "off"
  }
}

===== .\next-env.d.ts =====
/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference path="./.next/types/routes.d.ts" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


===== .\next.config.ts =====
import type { NextConfig } from "next";
import createNextIntlPlugin from "next-intl/plugin";

const nextConfig: NextConfig = {
  eslint: {ignoreDuringBuilds: true},
};

const withNextIntl = createNextIntlPlugin();

export default withNextIntl(nextConfig);


===== .\package.json =====
{
  "name": "my-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build --turbopack",
    "start": "next start",
    "lint": "eslint"
  },
  "dependencies": {
    "@iconify/react": "^6.0.2",
    "@react-three/drei": "^10.7.6",
    "@react-three/fiber": "^9.3.0",
    "leva": "^0.10.0",
    "next": "15.5.4",
    "next-intl": "^4.3.9",
    "next-themes": "^0.4.6",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-resizable-panels": "^3.0.6",
    "recharts": "^3.3.0",
    "three": "^0.180.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.5.4",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}


===== .\tailwind.config.ts =====
// tailwind.config.js or tailwind.config.ts
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: "class",
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        // Cú pháp này cho phép bạn dùng class như font-inter, font-unbounded
        inter: ['var(--font-inter)', 'sans-serif'],
        unbounded: ['var(--font-unbounded)', 'sans-serif'],
      },
    },
  },
  plugins: [],
}

===== .\tsconfig.json =====
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


===== .\i18n\navigation.ts =====
import {createNavigation} from 'next-intl/navigation';
import {routing} from './routing';

export const {Link, getPathname, redirect, usePathname, useRouter} =
  createNavigation(routing);

===== .\i18n\request.ts =====
import {hasLocale} from 'next-intl';
import {getRequestConfig} from 'next-intl/server';
import {routing} from './routing';

export default getRequestConfig(async ({requestLocale}) => {
  // Typically corresponds to the `[locale]` segment
  const requested = await requestLocale;
  const locale = hasLocale(routing.locales, requested)
    ? requested
    : routing.defaultLocale;

  return {
    locale,
    messages: (await import(`../messages/${locale}.json`)).default
  };
});

===== .\i18n\routing.ts =====
// ===== .\i18n\routing.ts =====
import {defineRouting} from 'next-intl/routing';

export const routing = defineRouting({
  locales: ['en', 'vi'],
  defaultLocale: 'vi',
  pathnames: {
    // Các đường dẫn đã có
    '/': '/',
    '/pathnames': {
      vi: '/pfadnamen'
    },

    // --- BỔ SUNG CÁC ĐƯỜNG DẪN MỚI TẠI ĐÂY ---
    '/login': '/login',
    '/register': '/register',
    '/forgot-password': '/forgot-password',
    '/terms': '/terms',
    '/privacy': '/privacy',
    '/confirm': '/confirm',
    
    // Thêm luôn các đường dẫn từ Header và Footer để tránh lỗi sau này
    '/community': '/community',
    '/features': '/features',
    '/pricing': '/pricing',
    '/start': '/start',
    '/plugin': '/plugin',
    '/status': '/status',
    '/about': '/about',
    '/contact': '/contact',
    '/workspace': '/workspace',

    // Dashboard routes
    '/dashboard': '/dashboard',
    '/dashboard/status': '/dashboard/status',
    '/dashboard/reports': '/dashboard/reports',
    '/dashboard/console': '/dashboard/console',
    '/dashboard/customers': '/dashboard/customers',
    '/dashboard/transactions': '/dashboard/transactions',
    '/dashboard/revenue': '/dashboard/revenue',
    '/dashboard/notifications': '/dashboard/notifications',
  }
});

===== .\messages\en.json =====
{
  "Header": {
    "home": "Home",
    "community": "Community",
    "features": "Features",
    "pricing": "Pricing",
    "log_in": "Log In",
    "start_for_free": "Start For Free"
  },
  "Hero": {
    "title": "The NO.1 AI 3D Model Generator for Everyone",
    "description": "Convert your photos or concept art images into 3D models with stunning details in just a matter of seconds.",
    "start_for_free": "START FOR FREE",
    "explore": "EXPLORE"
  },
  "ImageGallery": {
    "title": "Step into the World of 3D Imagination",
    "description": "Discover and download a variety of unique 3D models from our vibrant community.",
    "load_more": "Load more"
  },
  "WorkflowCTA": {
    "title": "Unlock a faster 3D workflow",
    "description": "Transform your design process with V2R. Try it now and see your creativity come to life effortlessly!",
    "start_for_free": "START FOR FREE",
    "explore": "EXPLORE"
  },
  "Footer": {
    "subscribe_title": "Subscribe to updates",
    "subscribe_description": "Join our newsletter to stay updated on latest news",
    "email_placeholder": "Enter your email",
    "subscribe_button": "Subscribe",
    "features_title": "Features",
    "text_to_3d": "Text to 3D",
    "image_to_3d": "Image to 3D",
    "product_title": "Product",
    "pricing": "Pricing",
    "community": "Community",
    "plugin": "Plugin",
    "status": "Status",
    "company_title": "Company",
    "about": "About",
    "contact": "Contact"
  },
  "Sidebar": {
    "text_to_3d": "Text to 3D",
    "image_to_3d": "Image to 3D",
    "image_label": "Image",
    "uploader_title": "Your Image Here",
    "uploader_formats": "Formats: .png, .jpg, .jpeg, .webp",
    "name_label": "Name",
    "name_placeholder": "Untitled Project",
    "model_label": "AI Model",
    "symmetry_label": "Symmetry",
    "symmetry_off": "Off",
    "symmetry_auto": "Auto",
    "symmetry_on": "On",
    "cost_info_model": "1 model",
    "cost_info_tokens": "10 tokens",
    "generate_button": "Generate"
  },
  "Login": {
    "welcome": "Welcome to V2R",
    "get_started": "Enter your Email to get started",
    "email_placeholder": "Email",
    "password_placeholder": "Password",
    "continue_button": "Continue",
    "forgot_password": "Forgot password",
    "or": "Or",
    "continue_with_google": "Continue with Google",
    "no_account": "Don't have an account?",
    "register_now": "Register now",
    "terms_prefix": "By continuing, you agree to our",
    "terms_of_use": "Terms of Use",
    "terms_and": "and",
    "privacy_policy": "Privacy Policy"
  },
    "Register": {
    "welcome": "Welcome to V2R",
    "get_started": "Enter your Email to get started",
    "email_placeholder": "Email",
    "password_placeholder": "Password",
    "confirm_password_placeholder": "Confirm Password",
    "continue_button": "Continue",
    "have_account": "Already have an account?",
    "login_now": "Log In",
    "terms_prefix": "By continuing, you agree to our",
    "terms_of_use": "Terms of Use",
    "terms_and": "and",
    "privacy_policy": "Privacy Policy"
  },
  "Workspace": {
    "new_project": "New Project",
    "your_library": "Your Library",
    "upgrade_account": "Upgrade Account",
    "user_free_tier": "Free",
    "search": "Search",
    "upload": "Upload",
    "my_library": "My Library"
  },
  "Pricing": {
    "title": "Upgrade",
    "subtitle": "Start for free. Upgrade to get special prices and more benefits.",
    "basic": {
      "name": "Basic",
      "price": "$9",
      "price_period": "month",
      "cta_button": "Sign Up",
      "features": [
        "10 Models",
        "Community Access",
        "Email Support"
      ]
    },
    "pro": {
      "name": "Pro",
      "price": "$25",
      "price_period": "month",
      "cta_button": "Sign Up",
      "features": [
        "30 Models",
        "API Access",
        "Priority Support",
        "Integration Plugin"
      ]
    },
    "enterprise": {
      "name": "Enterprise",
      "price": "$99",
      "price_period": "month",
      "cta_button": "Contact Us",
      "features": [
        "Unlimited Models",
        "Team Management",
        "Dedicated Support",
        "Advanced Security"
      ]
    }
  },
  "OTP": {
    "title": "Enter OTP Code",
    "subtitle": "A verification code has been sent to *******762",
    "did_not_receive": "Didn't receive the code?",
    "resend": "Resend",
    "continue_button": "Continue"
  },
  "Dashboard": {
    "overview": "Overview",
    "status_and_resources": "Status & Resources",
    "cost_reports": "Cost Reports",
    "console": "Console",
    "customers": "Customers",
    "transactions": "Transactions",
    "revenue": "Revenue",
    "notifications": "Notifications"
  }
}

===== .\messages\vi.json =====
{
  "Header": {
    "home": "Trang chủ",
    "community": "Cộng đồng",
    "features": "Tính năng",
    "pricing": "Bảng giá",
    "log_in": "Đăng nhập",
    "start_for_free": "Bắt đầu miễn phí"
  },
  "Hero": {
    "title": "Trình Tạo Mô Hình 3D AI SỐ 1 Cho Mọi Người",
    "description": "Chuyển đổi ảnh hoặc hình ảnh concept của bạn thành mô hình 3D với chi tiết tuyệt đẹp chỉ trong vài giây.",
    "start_for_free": "BẮT ĐẦU MIỄN PHÍ",
    "explore": "KHÁM PHÁ"
  },
  "ImageGallery": {
    "title": "Bước vào Thế giới Tưởng tượng 3D",
    "description": "Khám phá và tải xuống nhiều mô hình 3D độc đáo từ cộng đồng sôi động của chúng tôi.",
    "load_more": "Tải thêm"
  },
  "WorkflowCTA": {
    "title": "Mở khóa quy trình làm việc 3D nhanh hơn",
    "description": "Thay đổi quy trình thiết kế của bạn với V2R. Hãy thử ngay bây giờ và chứng kiến sự sáng tạo của bạn trở nên sống động một cách dễ dàng!",
    "start_for_free": "BẮT ĐẦU MIỄN PHÍ",
    "explore": "KHÁM PHÁ"
  },
  "Footer": {
    "subscribe_title": "Đăng ký nhận thông tin cập nhật",
    "subscribe_description": "Tham gia bản tin của chúng tôi để luôn cập nhật những tin tức mới nhất",
    "email_placeholder": "Nhập email của bạn",
    "subscribe_button": "Đăng ký",
    "features_title": "Tính năng",
    "text_to_3d": "Văn bản sang 3D",
    "image_to_3d": "Hình ảnh sang 3D",
    "product_title": "Sản phẩm",
    "pricing": "Bảng giá",
    "community": "Cộng đồng",
    "plugin": "Plugin",
    "status": "Trạng thái",
    "company_title": "Công ty",
    "about": "Về chúng tôi",
    "contact": "Liên hệ"
  },
  "Sidebar": {
    "text_to_3d": "Văn bản sang 3D",
    "image_to_3d": "Hình ảnh sang 3D",
    "image_label": "Hình ảnh",
    "uploader_title": "Hình ảnh của bạn ở đây",
    "uploader_formats": "Định dạng: .png, .jpg, .jpeg, .webp",
    "name_label": "Tên",
    "name_placeholder": "Dự án chưa có tên",
    "model_label": "Mô hình AI",
    "symmetry_label": "Đối xứng",
    "symmetry_off": "Tắt",
    "symmetry_auto": "Tự động",
    "symmetry_on": "Bật",
    "cost_info_model": "1 mô hình",
    "cost_info_tokens": "10 tokens",
    "generate_button": "Tạo"
  },
  "Login": {
    "welcome": "Chào mừng đến với V2R",
    "get_started": "Nhập Email của bạn để bắt đầu",
    "email_placeholder": "Email",
    "password_placeholder": "Mật khẩu",
    "continue_button": "Tiếp tục",
    "forgot_password": "Quên mật khẩu",
    "or": "Hoặc",
    "continue_with_google": "Tiếp tục với Google",
    "no_account": "Chưa có tài khoản?",
    "register_now": "Đăng ký ngay",
    "terms_prefix": "Bằng việc tiếp tục, bạn đồng ý với",
    "terms_of_use": "Điều khoản sử dụng",
    "terms_and": "và",
    "privacy_policy": "Chính sách bảo mật"
  },
  "Register": {
    "welcome": "Chào mừng đến với V2R",
    "get_started": "Nhập Email của bạn để bắt đầu",
    "email_placeholder": "Email",
    "password_placeholder": "Mật khẩu",
    "confirm_password_placeholder": "Xác nhận mật khẩu",
    "continue_button": "Tiếp tục",
    "have_account": "Đã có tài khoản?",
    "login_now": "Đăng nhập",
    "terms_prefix": "Bằng việc tiếp tục, bạn đồng ý với",
    "terms_of_use": "Điều khoản sử dụng",
    "terms_and": "và",
    "privacy_policy": "Chính sách bảo mật"
  },
  "Workspace": {
    "new_project": "Dự án mới",
    "your_library": "Thư viện của bạn",
    "upgrade_account": "Nâng cấp tài khoản",
    "user_free_tier": "Miễn phí",
    "search": "Tìm kiếm",
    "upload": "Tải lên",
    "my_library": "Thư viện của tôi"
  },
  "Pricing": {
    "title": "Nâng cấp",
    "subtitle": "Bắt đầu sử dụng miễn phí. Nâng cấp để nhận giá ưu đãi và thêm nhiều quyền lợi khác.",
    "basic": {
      "name": "Basic",
      "price": "199.000đ",
      "price_period": "tháng",
      "cta_button": "Đăng ký",
      "features": [
        "10 Mô hình",
        "Truy cập cộng đồng",
        "Hỗ trợ qua email"
      ]
    },
    "pro": {
      "name": "Pro",
      "price": "499.000đ",
      "price_period": "tháng",
      "cta_button": "Đăng ký",
      "features": [
        "30 Mô hình",
        "API access",
        "Hỗ trợ ưu tiên",
        "Plugin tích hợp"
      ]
    },
    "enterprise": {
      "name": "Enterprise",
      "price": "4.990.000đ",
      "price_period": "tháng",
      "cta_button": "Liên hệ",
      "features": [
        "Không giới hạn mô hình",
        "Quản lý đội nhóm",
        "Hỗ trợ riêng biệt",
        "Bảo mật nâng cao"
      ]
    }
  },
  "OTP": {
    "title": "Nhập mã OTP",
    "subtitle": "Mã xác thực đã được gửi đến *******762",
    "did_not_receive": "Chưa nhận được mã?",
    "resend": "Gửi lại",
    "continue_button": "Tiếp tục"
  },
  "Dashboard": {
    "overview": "Tổng quan",
    "status_and_resources": "Trạng thái & Tài nguyên",
    "cost_reports": "Báo cáo Chi phí",
    "console": "Console",
    "customers": "Khách hàng",
    "transactions": "Giao dịch",
    "revenue": "Doanh thu",
    "notifications": "Thông báo"
  }
}

===== .\src\middleware.ts =====
// src/middleware.ts
import createMiddleware from 'next-intl/middleware';

export default createMiddleware({
  locales: ['en', 'vi'],
  defaultLocale: 'en'
});

export const config = {
  matcher: ['/((?!api|_next/static|_next/image|favicon.ico|.*\\..*).*)']
};


===== .\src\app\globals.css =====
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
}

/* CẬP NHẬT: Thêm CSS để buộc Leva dropdown mở lên trên */
/* [data-leva-root] là selector ổn định cho container của Leva */
[data-leva-root] .leva-c-hPncDm { /* Đây là class của panel nổi */
  bottom: calc(100% + 8px) !important; /* Đẩy panel lên trên + 8px khoảng cách */
  top: auto !important; /* Tắt định vị top mặc định */
}

===== .\src\app\providers.tsx =====
"use client";

import { AuthProvider } from "@/context/AuthContext";
import { ReactNode } from "react";

// Component này sẽ đóng vai trò là điểm vào phía client cho các provider
export function Providers({ children }: { children: ReactNode }) {
  return (
    <AuthProvider>
      {children}
    </AuthProvider>
  );
}

===== .\src\app\[locale]\layout.tsx =====
import { ThemeProvider } from "@/context/ThemeProvider";
import { Providers } from "../providers";
import { NextIntlClientProvider } from "next-intl";
import { getMessages } from "next-intl/server";
import { Inter, Unbounded } from "next/font/google";
import "../globals.css";

const inter = Inter({ subsets: ["latin"], variable: "--font-inter" });
const unbounded = Unbounded({ subsets: ["latin"], variable: "--font-unbounded" });

export default async function RootLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}) {
  const { locale } = await params;
  const messages = await getMessages();

  return (
    <html lang={locale} suppressHydrationWarning>
      <body
        className={`${inter.variable} ${unbounded.variable} font-inter`}
        suppressHydrationWarning
      >
        <NextIntlClientProvider locale={locale} messages={messages}>
          <ThemeProvider>
            <Providers>
              <main>{children}</main>
            </Providers>
          </ThemeProvider>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}


===== .\src\app\[locale]\page.tsx =====
"use client";

import Footer from "@/components/Footer";
import Hero from "@/components/Hero";
import ImageGallery from "@/components/ImageGallery";
import WorkflowCTA from "@/components/WorkflowCTA";
import Header from "@/components/Header";
import Pricing from "@/components/Pricing";

export default function Home() {
  return (
    <>
      <Header />
      <Hero />
      <ImageGallery />
      <Pricing />
      <WorkflowCTA />
      <Footer />
    </>
  );
}

===== .\src\app\[locale]\confirm\page.tsx =====
// ===== .\src\app\[locale]\otp\page.tsx =====
"use client";

import { useTranslations } from "next-intl";
import { useRef, useState, type ChangeEvent, type KeyboardEvent } from "react";

export default function OtpPage() {
  const t = useTranslations("OTP");
  const [otp, setOtp] = useState<string[]>(new Array(5).fill(""));
  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);

  const handleChange = (index: number, e: ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    if (!/^\d?$/.test(value)) return;

    const newOtp = [...otp];
    newOtp[index] = value;
    setOtp(newOtp);

    if (value && index < otp.length - 1) {
      inputRefs.current[index + 1]?.focus();
    }
  };

  const handleKeyDown = (index: number, e: KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Backspace" && !otp[index] && index > 0) {
      inputRefs.current[index - 1]?.focus();
    }
  };

  return (
    <main className="flex items-center justify-center min-h-screen bg-neutral-200 dark:bg-neutral-800 p-4">
      <div className="w-full max-w-[676px] bg-white rounded-[40px] overflow-hidden p-8 sm:p-16 text-center">
        <h1 className="text-black text-4xl font-normal font-['Unbounded']">
          {t("title")}
        </h1>
        <p className="mt-6 text-black text-xl font-normal font-['Inter']">
          {t("subtitle")}
        </p>

        <div className="flex justify-center gap-x-2 sm:gap-x-5 my-14">
          {otp.map((digit, index) => (
            <input
              key={index}
              // === SỬA LỖI TẠI ĐÂY ===
              // Bọc phép gán trong khối lệnh `{}` để hàm không trả về giá trị
              ref={(el) => {
                inputRefs.current[index] = el;
              }}
              type="text"
              maxLength={1}
              value={digit}
              onChange={(e) => handleChange(index, e)}
              onKeyDown={(e) => handleKeyDown(index, e)}
              className="w-16 h-16 sm:w-24 sm:h-24 bg-white rounded-[10px] border-[1.5px] border-blue-800 text-center text-3xl sm:text-4xl font-bold focus:ring-2 focus:ring-blue-500 focus:outline-none"
            />
          ))}
        </div>

        <button className="w-56 h-20 bg-blue-900 rounded-2xl hover:bg-blue-800 transition-colors">
          <span className="text-white text-2xl font-semibold font-['Unbounded']">
            {t("continue_button")}
          </span>
        </button>

        <p className="mt-12 text-black text-xl font-normal font-['Inter']">
          {t("did_not_receive")}{" "}
          <button className="text-blue-800 font-medium hover:underline">
            {t("resend")}
          </button>
        </p>
      </div>
    </main>
  );
}

===== .\src\app\[locale]\dashboard\layout.tsx =====
// src/app/[locale]/dashboard/layout.tsx
"use client";

import DashboardSidebar from "@/components/dashboard/DashboardSidebar";
import { ReactNode, useState } from "react";

export default function DashboardLayout({ children }: { children: ReactNode }) {
  const [isCollapsed, setIsCollapsed] = useState(false);

  const toggleSidebar = () => {
    setIsCollapsed(!isCollapsed);
  };

  return (
    // Container này cần có position relative để làm gốc cho các phần tử con
    <div className="relative min-h-screen bg-gray-400">
      <DashboardSidebar 
        isCollapsed={isCollapsed} 
        toggleCollapse={toggleSidebar} 
      />
      
      {/* 
        VÙNG NỘI DUNG CHÍNH:
        - Có transition-all để thay đổi padding-left một cách mượt mà.
        - padding-left (pl) sẽ tương ứng với chiều rộng của sidebar (w-72 -> pl-72, w-20 -> pl-20).
        - h-screen và overflow-y-auto đảm bảo chỉ vùng nội dung này cuộn, sidebar đứng yên.
      */}
      <main className={`
        transition-all duration-300 ease-in-out
        h-screen overflow-y-auto
        ${isCollapsed ? 'pl-20' : 'pl-72'}
      `}>
        {/* Thêm một div bọc ngoài với padding như cũ */}
        <div className="p-10">
          {children}
        </div>
      </main>
    </div>
  );
}

===== .\src\app\[locale]\dashboard\page.tsx =====
import Overview from "@/components/dashboard/Overview";

export default function DashboardOverviewPage() {
  return <Overview />;
}

===== .\src\app\[locale]\dashboard\console\page.tsx =====
// ===== .\src\app\[locale]\dashboard\console\page.tsx =====
import { Icon } from "@iconify/react";

export default function ConsolePage() {
    return (
        <div className="space-y-8 h-full flex flex-col">
            <h1 className="text-blue-900 text-4xl font-bold font-['Unbounded']">Console</h1>
            <div className="flex-grow bg-black rounded-[10px] overflow-hidden flex flex-col">
                <div className="w-full h-6 bg-blue-900 flex-shrink-0" />
                <div className="p-7 text-white text-sm font-normal font-mono flex-grow overflow-y-auto">
                    <pre>
{`#include <iostream>

int main() { 
    std::cout << "Hello World!"; 
    return 0; 
}`}
                    </pre>
                </div>
                <div className="p-4 flex-shrink-0">
                    <div className="w-full h-9 bg-zinc-300 rounded-[4.83px] flex items-center px-3">
                        <span className="text-black text-sm font-normal font-mono">Type here...</span>
                        <Icon icon="mdi:send" className="w-4 h-4 ml-auto text-black" />
                    </div>
                </div>
            </div>
        </div>
    );
}

===== .\src\app\[locale]\dashboard\customers\page.tsx =====
// ===== .\src/app\[locale]\dashboard\customers\page.tsx =====
const customersData = [
  { name: 'Jim. Hogwarts', email: 'papapa7...', plan: 'Basic', models: 20, status: 'Hoạt động', date: '06/07/2025', time: '04:20:42' },
  { name: 'Jim. Hogwarts', email: 'papapa7...', plan: 'Basic', models: 17, status: 'Hoạt động', date: '06/07/2025', time: '04:20:42' },
  { name: 'Jim. Hogwarts', email: 'papapa7...', plan: 'Pro', models: 199, status: 'Hoạt động', date: '06/07/2025', time: '04:20:42' },
  { name: 'Jim. Hogwarts', email: 'papapa7...', plan: 'Basic', models: 15, status: 'Hoạt động', date: '06/07/2025', time: '04:20:42' },
  { name: 'Jim. Hogwarts', email: 'papapa7...', plan: 'Basic', models: 42, status: 'Hoạt động', date: '06/07/2025', time: '04:20:42' },
];

export default function CustomersPage() {
    return (
        <div className="space-y-8">
             <h1 className="text-blue-900 text-4xl font-bold font-['Unbounded']">Khách hàng</h1>
             <div className="bg-white rounded-2xl p-8">
                 <h2 className="text-black text-2xl font-semibold font-['Unbounded'] mb-6">Danh sách khách hàng</h2>
                 <div className="overflow-x-auto">
                     <table className="w-full text-left">
                         <thead className="bg-violet-300 rounded-md">
                             <tr className="text-black text-xl font-normal font-['Inter']">
                                 <th className="p-3">Tên khách hàng</th>
                                 <th className="p-3">Email</th>
                                 <th className="p-3">Gói dịch vụ</th>
                                 <th className="p-3">Số lượng mô hình</th>
                                 <th className="p-3">Trạng thái</th>
                                 <th className="p-3">Ngày đăng ký</th>
                             </tr>
                         </thead>
                         <tbody>
                             {customersData.map((customer, index) => (
                                 <tr key={index} className="border-b">
                                     <td className="p-3 text-black text-xl font-semibold">{customer.name}</td>
                                     <td className="p-3 text-black text-xl font-light">{customer.email}</td>
                                     <td className={`p-3 text-xl font-semibold ${customer.plan === 'Pro' ? 'text-blue-900' : 'text-black'}`}>{customer.plan}</td>
                                     <td className="p-3 text-black text-xl font-light">{customer.models}</td>
                                     <td className="p-3 text-green-700 text-xl font-normal">{customer.status}</td>
                                     <td className="p-3 text-black text-xl font-light">
                                         <div>{customer.date}</div>
                                         <div>{customer.time}</div>
                                     </td>
                                 </tr>
                             ))}
                         </tbody>
                     </table>
                 </div>
             </div>
        </div>
    );
}

===== .\src\app\[locale]\dashboard\notifications\page.tsx =====
// ===== .\src\app\[locale]\dashboard\notifications\page.tsx =====
const notifications = [
    { title: "XÁC NHẬN THANH TOÁN", date: "15/10/2025" },
    { title: "CẬP NHẬT HỆ THỐNG", date: "14/10/2025" },
    { title: "XÁC NHẬN THANH TOÁN", date: "13/10/2025" },
    { title: "BẢO TRÌ DỰ KIẾN", date: "12/10/2025" },
    { title: "XÁC NHẬN THANH TOÁN", date: "11/10/2025" },
    { title: "CẬP NHẬT HỆ THỐNG", date: "10/10/2025" },
    { title: "XÁC NHẬN THANH TOÁN", date: "09/10/2025" },
];
const content = "Đây là nội dung, nội dung là đây nè đây là nội dung nhé lorem ipsum ipsum loren hello hihihi. Đây là nội dung, nội dung là đây nè đây là nội dung nhé lorem ipsum ipsum loren hello hihihi.";

const NotificationCard = ({ title, date, content }: { title: string, date: string, content: string }) => (
    <div className="w-full bg-white rounded-[20px] p-6 shadow-md">
        <h3 className="text-neutral-950 text-xl font-semibold font-['Unbounded']">{title}</h3>
        <p className="mt-4 text-neutral-700 text-xl font-medium">{content}</p>
        <p className="mt-6 text-neutral-700 text-xl font-medium">{date}</p>
    </div>
);

export default function NotificationsPage() {
    return (
        <div className="space-y-8">
            <h1 className="text-blue-900 text-4xl font-bold font-['Unbounded']">Thông báo</h1>
            <div className="space-y-8">
                {notifications.map((item, index) => (
                    <NotificationCard key={index} title={item.title} date={item.date} content={content} />
                ))}
            </div>
        </div>
    );
}

===== .\src\app\[locale]\dashboard\reports\page.tsx =====
// ===== .\src\app\[locale]\dashboard\reports\page.tsx =====
"use client";
import { Area, AreaChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from "recharts";

const costData = [
  { name: '06/07', gpu: 18000, backend: 22000 },
  { name: '07/07', gpu: 16000, backend: 21000 },
  { name: '08/07', gpu: 17000, backend: 23000 },
  { name: '09/07', gpu: 15000, backend: 20000 },
  { name: '10/07', gpu: 19000, backend: 24000 },
  { name: '11/07', gpu: 20000, backend: 25000 },
  { name: '12/07', gpu: 18500, backend: 23500 },
];

export default function ReportsPage() {
    return (
        <div className="space-y-8">
            <h1 className="text-blue-900 text-4xl font-bold font-['Unbounded']">Báo cáo & Chi phí</h1>
             <div className="flex justify-start gap-2">
                 <button className="w-24 h-11 bg-blue-900 rounded-md text-neutral-100 text-base font-semibold font-['Unbounded']">TUẦN</button>
                 <button className="w-24 h-11 bg-white rounded-md text-neutral-950 text-base font-semibold font-['Unbounded']">THÁNG</button>
                 <button className="w-24 h-11 bg-white rounded-md text-neutral-950 text-base font-semibold font-['Unbounded']">NĂM</button>
             </div>
             <div className="w-full bg-white rounded-2xl p-8">
                  <div className="flex justify-start items-center gap-x-6 mb-4">
                       <div className="flex items-center gap-x-2">
                           <div className="w-8 h-6 bg-indigo-300 rounded" />
                           <span className="text-neutral-950 text-xs font-semibold font-['Unbounded']">GPU</span>
                       </div>
                       <div className="flex items-center gap-x-2">
                           <div className="w-8 h-6 bg-blue-900 rounded" />
                           <span className="text-neutral-950 text-xs font-semibold font-['Unbounded']">Backend</span>
                       </div>
                  </div>
                 <ResponsiveContainer width="100%" height={400}>
                     <AreaChart data={costData} margin={{ top: 10, right: 30, left: 20, bottom: 20 }}>
                         <CartesianGrid strokeDasharray="3 3" vertical={false} />
                         <XAxis dataKey="name" dy={10} />
                         <YAxis unit="K" dx={-10} />
                         <Tooltip formatter={(value: number) => `${value / 1000}K`} />
                         <Area type="monotone" dataKey="gpu" stackId="1" stroke="#818cf8" fill="#a5b4fc" />
                         <Area type="monotone" dataKey="backend" stackId="1" stroke="#312e81" fill="#4338ca" />
                     </AreaChart>
                 </ResponsiveContainer>
             </div>
        </div>
    );
}

===== .\src\app\[locale]\dashboard\revenue\page.tsx =====
"use client";
import { Area, AreaChart, CartesianGrid, ResponsiveContainer, Tooltip, XAxis, YAxis } from "recharts";

const revenueData = [
  { name: '06/07', value: 22000 }, { name: '07/07', value: 19000 },
  { name: '08/07', value: 21000 }, { name: '09/07', value: 18000 },
  { name: '10/07', value: 24000 }, { name: '11/07', value: 25000 },
  { name: '12/07', value: 23000 },
];

export default function RevenuePage() {
    return (
        <div className="space-y-8">
            <h1 className="text-blue-900 text-4xl font-bold font-['Unbounded']">Doanh thu</h1>
             <div className="flex justify-start gap-2">
                 <button className="w-24 h-11 bg-blue-900 rounded-md text-neutral-100 text-base font-semibold font-['Unbounded']">TUẦN</button>
                 <button className="w-24 h-11 bg-white rounded-md text-neutral-950 text-base font-semibold font-['Unbounded']">THÁNG</button>
                 <button className="w-24 h-11 bg-white rounded-md text-neutral-950 text-base font-semibold font-['Unbounded']">NĂM</button>
             </div>
             <div className="w-full bg-white rounded-2xl p-8">
                 <ResponsiveContainer width="100%" height={400}>
                     <AreaChart data={revenueData} margin={{ top: 10, right: 30, left: 20, bottom: 20 }}>
                         <defs>
                             <linearGradient id="revenueGradient" x1="0" y1="0" x2="0" y2="1">
                                 <stop offset="5%" stopColor="#3b82f6" stopOpacity={0.8}/>
                                 <stop offset="95%" stopColor="#3b82f6" stopOpacity={0}/>
                             </linearGradient>
                         </defs>
                         <CartesianGrid strokeDasharray="3 3" vertical={false} />
                         <XAxis dataKey="name" dy={10} />
                         <YAxis unit="K" dx={-10} domain={[0, 25000]} tickFormatter={(value) => `${value / 1000}`} />
                         <Tooltip formatter={(value: number) => `$${value.toLocaleString()}`} />
                         <Area type="monotone" dataKey="value" stroke="#1e3a8a" strokeWidth={3} fill="url(#revenueGradient)" />
                     </AreaChart>
                 </ResponsiveContainer>
             </div>
        </div>
    );
}

===== .\src\app\[locale]\dashboard\status\page.tsx =====
// ===== .\src\app\[locale]\dashboard\status\page.tsx =====
"use client";
import { Area, AreaChart, ResponsiveContainer, XAxis, YAxis } from "recharts";

const usageData = Array.from({ length: 60 }, (_, i) => ({
  name: i + 1,
  uv: Math.random() * 80 + 10,
}));

const ResourceChart = ({ title, unit, max, data }: { title: string; unit: string; max: string; data: any[];}) => (
  <div className="w-full bg-white rounded-2xl overflow-hidden p-8">
    <h2 className="text-black text-4xl font-bold font-['Unbounded']">{title}</h2>
    <div className="flex justify-between text-neutral-800 text-base font-normal mt-10">
      <span>{unit}</span>
      <span>{max}</span>
    </div>
    <ResponsiveContainer width="100%" height={350}>
      <AreaChart data={data} margin={{ top: 5, right: 0, left: 0, bottom: 5 }}>
        <defs>
          <linearGradient id="colorUv" x1="0" y1="0" x2="0" y2="1">
            <stop offset="5%" stopColor="#3b82f6" stopOpacity={0.4}/>
            <stop offset="95%" stopColor="#3b82f6" stopOpacity={0}/>
          </linearGradient>
        </defs>
        <YAxis hide={true} domain={[0, 100]} />
        <XAxis hide={true} />
        <Area type="monotone" dataKey="uv" stroke="#1e3a8a" strokeWidth={3} fillOpacity={1} fill="url(#colorUv)" />
      </AreaChart>
    </ResponsiveContainer>
    <div className="flex justify-between text-neutral-800 text-base font-normal">
        <span>60 giây</span>
        <span>0%</span>
    </div>
  </div>
);

export default function StatusPage() {
  return (
    <div className="space-y-8">
      <h1 className="text-blue-900 text-4xl font-bold font-['Unbounded']">Trạng thái & Tài nguyên</h1>
      <ResourceChart title="CPU" unit="% Sử dụng" max="100%" data={usageData} />
      <ResourceChart title="CPU của GPU" unit="% Sử dụng" max="100%" data={usageData} />
      <ResourceChart title="RAM của GPU (VRAM)" unit="Bộ nhớ đã dùng" max="15.4 GB" data={usageData} />
    </div>
  );
}

===== .\src\app\[locale]\dashboard\transactions\page.tsx =====
// ===== .\src\app\[locale]\dashboard\transactions\page.tsx =====
const transactionsData = [
  { id: '01835193', name: 'Jim. Hogwarts', amount: '$420', service: 'Nâng cấp tài khoản Pro', status: 'Thành công', date: '06/07/2025', time: '04:20:42' },
  { id: '01835193', name: 'Jim. Hogwarts', amount: '$420', service: 'Nâng cấp tài khoản Pro', status: 'Thành công', date: '06/07/2025', time: '04:20:42' },
  { id: '01835193', name: 'Jim. Hogwarts', amount: '$420', service: 'Nâng cấp tài khoản Pro', status: 'Đang chờ', date: '06/07/2025', time: '04:20:42' },
  { id: '01835193', name: 'Jim. Hogwarts', amount: '$420', service: 'Nâng cấp tài khoản Pro', status: 'Đang chờ', date: '06/07/2025', time: '04:20:42' },
];

export default function TransactionsPage() {
    return (
        <div className="space-y-8">
             <h1 className="text-blue-900 text-4xl font-bold font-['Unbounded']">Giao dịch</h1>
             <div className="bg-white rounded-2xl p-8">
                 <h2 className="text-black text-2xl font-semibold font-['Unbounded'] mb-6">Giao dịch gần đây</h2>
                 <div className="overflow-x-auto">
                     <table className="w-full text-left">
                         <thead className="bg-violet-300 rounded-md">
                             <tr className="text-black text-xl font-normal font-['Inter']">
                                 <th className="p-3">Mã giao dịch</th>
                                 <th className="p-3">Tên khách hàng</th>
                                 <th className="p-3">Số tiền</th>
                                 <th className="p-3">Gói dịch vụ</th>
                                 <th className="p-3">Trạng thái</th>
                                 <th className="p-3">Thời gian tạo</th>
                             </tr>
                         </thead>
                         <tbody>
                             {transactionsData.map((tx, index) => (
                                 <tr key={index} className="border-b">
                                     <td className="p-3 text-black text-xl font-normal">{tx.id}</td>
                                     <td className="p-3 text-black text-xl font-semibold">{tx.name}</td>
                                     <td className="p-3 text-black text-xl font-semibold">{tx.amount}</td>
                                     <td className="p-3 text-black text-xl font-normal">{tx.service}</td>
                                     <td className={`p-3 text-xl font-normal ${tx.status === 'Thành công' ? 'text-green-700' : 'text-amber-500'}`}>{tx.status}</td>
                                     <td className="p-3 text-black text-xl font-light">
                                         <div>{tx.date}</div>
                                         <div>{tx.time}</div>
                                     </td>
                                 </tr>
                             ))}
                         </tbody>
                     </table>
                 </div>
             </div>
        </div>
    );
}

===== .\src\app\[locale]\login\page.tsx =====
"use client";

import { Icon } from '@iconify/react';
import { useTranslations } from 'next-intl';
import Image from 'next/image';
import { Link } from '../../../../i18n/navigation';
import { useAuth } from '@/context/AuthContext'; // 1. Import useAuth
import React from 'react';

export default function LoginPage() {
  const t = useTranslations('Login');
  const { login } = useAuth(); // 2. Lấy hàm login

  const handleLogin = (e: React.FormEvent) => {
    e.preventDefault(); // Ngăn form submit lại trang
    login(); // 3. Gọi hàm login để cập nhật trạng thái và chuyển hướng
  };

  return (
    <main className="flex items-center justify-center min-h-screen bg-neutral-800">
      <div className="w-full max-w-sm mx-auto bg-stone-900 text-white rounded-2xl shadow-lg p-8">
        
        <div className="text-center mb-4">
          <Image src="/logo/light.png" alt="V2R Logo" width={50} height={31} className="mx-auto mb-6" />
          <h1 className="text-xl font-semibold font-['Unbounded']">{t('welcome')}</h1>
          <p className="text-sm text-gray-300 font-['Inter'] mt-2">{t('get_started')}</p>
        </div>

        {/* 4. Gắn sự kiện onSubmit */}
        <form className="space-y-4" onSubmit={handleLogin}>
          <div>
            <input 
              type="email" 
              placeholder={t('email_placeholder')}
              className="w-full h-10 px-4 bg-stone-900 border border-zinc-700 rounded-lg text-sm text-zinc-400 font-['Inter'] focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <input 
              type="password" 
              placeholder={t('password_placeholder')}
              className="w-full h-10 px-4 bg-stone-900 border border-zinc-700 rounded-lg text-sm text-zinc-400 font-['Inter'] focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <button 
            type="submit"
            className="w-full h-10 bg-blue-800 rounded-lg text-sm font-bold font-['Unbounded'] hover:bg-blue-700 transition-colors"
          >
            {t('continue_button')}
          </button>
        </form>

        <div className="text-center mt-4">
          <Link href="/forgot-password" className="text-xs text-cyan-300 hover:underline font-semibold font-['Inter']">
            {t('forgot_password')}
          </Link>
        </div>
        
        <div className="flex items-center my-6">
          <hr className="w-full border-zinc-700" />
          <span className="px-2 text-xs text-stone-300 font-['Inter']">{t('or')}</span>
          <hr className="w-full border-zinc-700" />
        </div>

        <button className="w-full h-10 mt-4 bg-white text-black rounded-lg text-sm font-semibold font-['Inter'] flex items-center justify-center hover:bg-gray-200 transition-colors">
          <Icon icon="flat-color-icons:google" className="w-5 h-5 mr-2" />
          {t('continue_with_google')}
        </button>

        <div className="flex justify-center space-x-4 mt-6">
            <Link href="/" className="w-9 h-9 bg-white rounded-full flex items-center justify-center" aria-label="Continue with Facebook">
                <Icon icon="logos:facebook" className="w-full h-full" />
            </Link>
            <Link href="/" className="w-9 h-9 bg-black rounded-full flex items-center justify-center border border-gray-600" aria-label="Continue with X">
                <Icon icon="fa6-brands:square-x-twitter" className="w-full h-full" />
            </Link>
            <Link href="/" className="w-9 h-9 bg-[#5865F2] rounded-full flex items-center justify-center" aria-label="Continue with Discord">
                <Icon icon="skill-icons:discord" className="w-full h-full" />
            </Link>
            <Link href="/" className="w-9 h-9 bg-[#26A5E4] rounded-full flex items-center justify-center" aria-label="Continue with Telegram">
                <Icon icon="streamline-color:telegram-flat" className="w-full h-full" />
            </Link>
        </div>

        <div className="text-center text-xs text-white font-medium font-['Inter'] mt-6">
          {t('no_account')}{' '}
          <Link href="/register" className="text-cyan-300 hover:underline">
            {t('register_now')}
          </Link>
        </div>

        <div className="text-center text-zinc-400 text-[9px] font-medium font-['Inter'] mt-8">
          <span>{t('terms_prefix')} </span>
          <Link href="/terms" className="text-cyan-300 hover:underline">{t('terms_of_use')}</Link>
          <span> {t('terms_and')} </span>
          <Link href="/privacy" className="text-cyan-300 hover:underline">{t('privacy_policy')}</Link>
          <span>.</span>
        </div>

      </div>
    </main>
  );
}

===== .\src\app\[locale]\register\page.tsx =====
"use client";

import { useTranslations } from 'next-intl';
import Image from 'next/image';
import { Link } from '@/../i18n/navigation';

export default function RegisterPage() {
  const t = useTranslations('Register');

  return (
    <main className="flex items-center justify-center min-h-screen bg-neutral-800">
      <div className="w-full max-w-sm mx-auto bg-stone-900 text-white rounded-2xl shadow-lg p-8">
        
        <div className="text-center mb-4">
          <Image src="/logo/light.png" alt="V2R Logo" width={50} height={31} className="mx-auto mb-6" />
          <h1 className="text-xl font-semibold font-['Unbounded']">{t('welcome')}</h1>
          <p className="text-sm text-gray-300 font-['Inter'] mt-2">{t('get_started')}</p>
        </div>

        <form className="space-y-4">
          <div>
            <input 
              type="email" 
              placeholder={t('email_placeholder')}
              className="w-full h-10 px-4 bg-stone-900 border border-zinc-700 rounded-lg text-sm text-zinc-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <input 
              type="password" 
              placeholder={t('password_placeholder')}
              className="w-full h-10 px-4 bg-stone-900 border border-zinc-700 rounded-lg text-sm text-zinc-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
           <div>
            <input 
              type="password" 
              placeholder={t('confirm_password_placeholder')}
              className="w-full h-10 px-4 bg-stone-900 border border-zinc-700 rounded-lg text-sm text-zinc-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <button 
            type="submit"
            className="w-full h-10 bg-blue-800 rounded-lg text-sm font-bold font-['Unbounded'] hover:bg-blue-700 transition-colors"
          >
            {t('continue_button')}
          </button>
        </form>

        <div className="text-center text-xs text-white font-medium font-['Inter'] mt-6">
          {t('have_account')}{' '}
          <Link href="/login" className="text-cyan-300 hover:underline font-semibold">
            {t('login_now')}
          </Link>
        </div>

        <div className="text-center text-zinc-400 text-[9px] font-medium font-roboto mt-8">
          <span>{t('terms_prefix')} </span>
          <Link href="/terms" className="text-cyan-300 hover:underline">{t('terms_of_use')}</Link>
          <span> {t('terms_and')} </span>
          <Link href="/privacy" className="text-cyan-300 hover:underline">{t('privacy_policy')}</Link>
          <span>.</span>
        </div>

      </div>
    </main>
  );
}

===== .\src\app\[locale]\workspace\page.tsx =====
"use client";

import { useState, useRef, useEffect } from "react";
import {
  Panel,
  PanelGroup,
  PanelResizeHandle,
  type ImperativePanelHandle, // SỬA LỖI 1: Dùng type đúng là ImperativePanelHandle
} from "react-resizable-panels";

import Sidebar from "@/components/workspace/Sidebar";
import ViewPanel from "@/components/workspace/ViewPanel";
import LibraryPanel from "@/components/workspace/LibraryPanel";
import { Leva } from "leva";
import { Icon } from "@iconify/react";
import { useTheme } from "next-themes";

const SIDE_PANEL_EXPANDED_PX = 288;
const SIDE_PANEL_COLLAPSED_PX = 56;

export default function WorkspacePage() {
  const [isMobileSidebarOpen, setMobileSidebarOpen] = useState(false);
  const [isSidebarCollapsed, setSidebarCollapsed] = useState(false);
  const [isLibraryPanelCollapsed, setLibraryPanelCollapsed] = useState(false);

  const { resolvedTheme } = useTheme();
  
  const [sidePanelSize, setSidePanelSize] = useState(20);
  const [collapsedSize, setCollapsedSize] = useState(4);
  
  const [viewPanelBg, setViewPanelBg] = useState("bg-neutral-900");
  const [handleBg, setHandleBg] = useState("bg-neutral-900");

  useEffect(() => {
    const updatePanelSizes = () => {
      const screenWidth = window.innerWidth;
      setSidePanelSize((SIDE_PANEL_EXPANDED_PX / screenWidth) * 100);
      setCollapsedSize((SIDE_PANEL_COLLAPSED_PX / screenWidth) * 100);
    };

    updatePanelSizes();
    window.addEventListener('resize', updatePanelSizes);
    return () => window.removeEventListener('resize', updatePanelSizes);
  }, []);


  useEffect(() => {
    if (resolvedTheme === 'light') {
      setViewPanelBg("bg-indigo-50");
      setHandleBg("bg-indigo-50");
    } else {
      setViewPanelBg("bg-neutral-900");
      setHandleBg("bg-neutral-900");
    }
  }, [resolvedTheme]);

  const sidebarPanelRef = useRef<ImperativePanelHandle>(null); // SỬA LỖI 1
  const libraryPanelRef = useRef<ImperativePanelHandle>(null); // SỬA LỖI 1

  const toggleSidebar = () => {
    const panel = sidebarPanelRef.current;
    if (panel) { panel.isCollapsed() ? panel.expand() : panel.collapse(); }
  };

  const toggleLibraryPanel = () => {
    const panel = libraryPanelRef.current;
    if (panel) { panel.isCollapsed() ? panel.expand() : panel.collapse(); }
  };

  return (
    <main className="w-screen h-screen overflow-hidden select-none">
      <button
        onClick={() => setMobileSidebarOpen(true)}
        className="absolute top-4 left-4 z-50 lg:hidden p-2 bg-gray-700/50 text-white rounded-md"
        aria-label="Open sidebar"
      >
        <Icon icon="mdi:menu" width={24} />
      </button>

      <PanelGroup direction="horizontal">
        <Panel
          ref={sidebarPanelRef}
          defaultSize={sidePanelSize}
          minSize={15}
          collapsible={true}
          collapsedSize={collapsedSize}
          onCollapse={() => setSidebarCollapsed(true)}
          onExpand={() => setSidebarCollapsed(false)}
        >
          <Sidebar
            isCollapsed={isSidebarCollapsed}
            toggleCollapse={toggleSidebar}
            isSidebarOpen={isMobileSidebarOpen}
            setIsSidebarOpen={setMobileSidebarOpen}
          />
        </Panel>
        
        <PanelResizeHandle className={`w-1.5 transition-colors duration-200 group ${handleBg}`}>
          <div className="h-full w-px bg-transparent group-hover:bg-blue-600 transition-colors duration-200" />
        </PanelResizeHandle>

        <Panel minSize={30}>
          <div className={`h-full relative ${viewPanelBg}`}>
            <ViewPanel />
            <div className="absolute bottom-4 left-1/2 -translate-x-1/2 w-[300px] z-10">
              <Leva fill oneLineLabels collapsed />
            </div>
          </div>
        </Panel>

        <PanelResizeHandle className={`w-1.5 transition-colors duration-200 group ${handleBg}`}>
           <div className="h-full w-px bg-transparent group-hover:bg-blue-600 transition-colors duration-200" />
        </PanelResizeHandle>

        <Panel
          ref={libraryPanelRef}
          defaultSize={sidePanelSize}
          minSize={15}
          collapsible={true}
          collapsedSize={collapsedSize}
          onCollapse={() => setLibraryPanelCollapsed(true)}
          onExpand={() => setLibraryPanelCollapsed(false)}
        >
          <LibraryPanel
            isCollapsed={isLibraryPanelCollapsed}
            toggleCollapse={toggleLibraryPanel}
          />
        </Panel>
      </PanelGroup>
    </main>
  );
}

===== .\src\components\Footer.tsx =====
"use client";

import type { FC } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { useTranslations } from 'next-intl';

const Footer: FC = () => {
  const t = useTranslations('Footer');

  return (
    <footer className="relative bg-gradient-to-b from-stone-50 to-blue-800 rounded-t-3xl pt-24 pb-12">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 grid grid-cols-1 md:grid-cols-4 lg:grid-cols-5 gap-8 text-neutral-900">
        {/* Subscription */}
        <div className="lg:col-span-2">
          <h3 className="text-xl font-semibold font-['Unbounded']">{t('subscribe_title')}</h3>
          <p className="mt-2 text-lg font-['Inter']">{t('subscribe_description')}</p>
          <form className="mt-4 flex flex-col sm:flex-row gap-4">
            <input 
              type="email" 
              placeholder={t('email_placeholder')}
              className="w-full sm:w-80 h-11 px-4 rounded-[10px] bg-white text-stone-500 font-['Inter']" 
            />
        <button className="bg-blue-800 text-white text-lg font-medium font-['Unbounded'] rounded-[10px] h-11 px-8 whitespace-nowrap">
          {t('subscribe_button')}
        </button>
          </form>
        </div>
        
        {/* Links */}
        <div>
          <h3 className="text-xl font-semibold font-['Unbounded']">{t('features_title')}</h3>
          <ul className="mt-4 space-y-2 text-lg font-['Inter']">
            <li><Link href="/features#text-to-3d">{t('text_to_3d')}</Link></li>
            <li><Link href="/features#image-to-3d">{t('image_to_3d')}</Link></li>
          </ul>
        </div>

        <div>
          <h3 className="text-xl font-semibold font-['Unbounded']">{t('product_title')}</h3>
          <ul className="mt-4 space-y-2 text-lg font-['Inter']">
            <li><Link href="/pricing">{t('pricing')}</Link></li>
            <li><Link href="/community">{t('community')}</Link></li>
            <li><Link href="/plugin">{t('plugin')}</Link></li>
            <li><Link href="/status">{t('status')}</Link></li>
          </ul>
        </div>

        <div>
          <h3 className="text-xl font-semibold font-['Unbounded']">{t('company_title')}</h3>
          <ul className="mt-4 space-y-2 text-lg font-['Inter']">
            <li><Link href="/about">{t('about')}</Link></li>
            <li><Link href="/contact">{t('contact')}</Link></li>
          </ul>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-16 flex justify-between items-center">
         <Image src="/logo/dark.png" alt="Logo" width={50} height={50} />
      </div>
    </footer>
  );
};

export default Footer;

===== .\src\components\Header.tsx =====
"use client";

import { useState } from 'react';
import Image from 'next/image';
import { Link } from '../../i18n/navigation'; // Sử dụng Link từ next-intl
import { useTranslations } from 'next-intl';
import LanguageSwitcher from '@/components/LanguageSwitcher';
import { useAuth } from '@/context/AuthContext'; // 1. Import useAuth hook
import { Icon } from '@iconify/react';

const Header = () => {
  const t = useTranslations('Header');
  const { isAuthenticated, logout } = useAuth(); // 2. Lấy trạng thái và hàm logout
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);

  return (
    <header className="absolute top-0 left-0 w-full z-10">
      <nav className="flex items-center justify-between max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-24">
        <div className="flex items-center">
          <Link href="/">
            <Image src="/logo/dark.png" alt="Logo" width={50} height={50} />
          </Link>
        </div>
        <div className="hidden md:flex items-center space-x-8 text-gray-800 font-['Unbounded'] text-lg">
          <Link href="/" className="bg-neutral-900 text-neutral-100 rounded-xl px-6 py-2.5 font-bold">{t('home')}</Link>
          <Link href="/community">{t('community')}</Link>
          <Link href="/features">{t('features')}</Link>
          <Link href="/pricing">{t('pricing')}</Link>
        </div>
        <div className="hidden md:flex items-center space-x-4">
          <LanguageSwitcher />

          {/* 3. Hiển thị có điều kiện */}
          {isAuthenticated ? (
            <div className="relative">
              <button onClick={() => setIsDropdownOpen(!isDropdownOpen)} className="w-10 h-10 bg-zinc-300 rounded-full flex items-center justify-center">
                <Icon icon="mdi:user" className="w-6 h-6 text-black" />
              </button>
              {isDropdownOpen && (
                <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-20">
                  <Link href="/workspace" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Workspace</Link>
                  <button
                    onClick={() => {
                      logout();
                      setIsDropdownOpen(false);
                    }}
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                  >
                    Log Out
                  </button>
                </div>
              )}
            </div>
          ) : (
            <>
              <Link href="/login" className="text-gray-800 font-['Unbounded'] text-lg">{t('log_in')}</Link>
              <Link href="/start" className="bg-neutral-900 text-neutral-100 rounded-xl px-6 py-2.5 font-['Unbounded'] text-lg">{t('start_for_free')}</Link>
            </>
          )}
        </div>
      </nav>
    </header>
  );
};

export default Header;

===== .\src\components\Hero.tsx =====
"use client";

import type { FC } from 'react';
import Image from 'next/image';
import { useTranslations } from 'next-intl';

const Hero: FC = () => {
  const t = useTranslations('Hero');

  return (
    <section className="relative pt-40 pb-20">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex flex-col lg:flex-row items-center">
        {/* Left Content */}
        <div className="lg:w-1/2 text-left">
          <h1 className="text-6xl font-bold font-['Unbounded'] capitalize text-neutral-900">
            {t('title')}
          </h1>
          <p className="mt-6 text-lg font-['Inter'] text-neutral-900 max-w-lg">
            {t('description')}
          </p>
          <div className="mt-8 flex items-center space-x-4">
            <button className="bg-blue-900 text-white text-xl font-semibold font-['Unbounded'] tracking-wide rounded-[30px] px-8 py-4 text-center flex items-center hover:bg-blue-800 transition-colors">
              {t('start_for_free')}
            </button>
            <button className="bg-neutral-900 text-neutral-100 text-xl font-semibold font-['Unbounded'] tracking-wide rounded-[30px] px-8 py-4 flex items-center">
              {t('explore')}
              <div className="ml-2 w-7 h-7 flex items-center justify-center">
                 <div className="w-0 h-0 border-t-[7px] border-t-transparent border-l-[10px] border-l-neutral-100 border-b-[7px] border-b-transparent"></div>
              </div>
            </button>
          </div>
        </div>

        {/* Right Image */}
        <div className="lg:w-1/2 mt-12 lg:mt-0 relative flex justify-center items-center lg:pl-60">
          <div className="w-96 h-[520px] bg-gradient-to-l from-zinc-900 via-gray-400 to-zinc-900 rounded-[20px] relative">
             <Image 
                src="/landing-page/untiltlsed 3.png" 
                alt="Featured 3D Model" 
                width={368} 
                height={465}
                className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 object-cover rounded-xl"
             />
          </div>
        </div>
      </div>
    </section>
  );
};

export default Hero;

===== .\src\components\ImageGallery.tsx =====
"use client";
import type { FC } from 'react';
import Image from 'next/image';
import { useTranslations } from 'next-intl';

interface ImageItem {
  src: string;
  width: number;
  height: number;
  alt: string;
}

const images: ImageItem[] = [
  { src: '/landing-page/image 4.png', width: 413, height: 576, alt: '3D model render' },
  { src: '/landing-page/image 9.png', width: 413, height: 180, alt: '3D model render' },
  { src: '/landing-page/image 10.png', width: 413, height: 592, alt: '3D model render' },
  { src: '/landing-page/image 11.png', width: 413, height: 619, alt: '3D model render' },
  { src: '/landing-page/image 13.png', width: 413, height: 425, alt: '3D model render' },
  { src: '/landing-page/image 14.png', width: 413, height: 674, alt: '3D model render' },
  { src: '/landing-page/image 15.png', width: 413, height: 701, alt: '3D model render' },
  { src: '/landing-page/image 16.png', width: 413, height: 401, alt: '3D model render' },
  { src: '/landing-page/image 17.png', width: 413, height: 592, alt: '3D model render' },
  { src: '/landing-page/image 18.png', width: 413, height: 592, alt: '3D model render' },
  { src: '/landing-page/image 19.png', width: 413, height: 425, alt: '3D model render' },
  { src: '/landing-page/image 20.png', width: 413, height: 269, alt: '3D model render' },
  { src: '/landing-page/image 21.png', width: 413, height: 619, alt: '3D model render' },
  { src: '/landing-page/image 22.png', width: 413, height: 425, alt: '3D model render' },
  { src: '/landing-page/image 23.png', width: 413, height: 592, alt: '3D model render' },
  // Bạn có thể thêm các ảnh còn lại vào đây
];

const ImageGallery: FC = () => {
  const t = useTranslations('ImageGallery');

  return (
    <section className="py-20">
      <div className="text-center max-w-3xl mx-auto px-4">
        <h2 className="text-4xl font-bold font-['Unbounded'] text-neutral-900">{t('title')}</h2>
        <p className="mt-4 text-xl font-['Inter'] text-neutral-900">{t('description')}</p>
      </div>
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-12 columns-1 md:columns-2 lg:columns-3 gap-8">
        {images.map((image) => (
          <div key={image.src} className="mb-8 break-inside-avoid">
            <Image 
              src={image.src} 
              alt={image.alt}
              width={image.width} 
              height={image.height}
              className="rounded-[35px] w-full h-auto"
              sizes="(min-width: 1024px) 33vw, (min-width: 768px) 50vw, 100vw"
            />
          </div>
        ))}
      </div>
      
      <div className="text-center mt-12">
        <button className="bg-neutral-900 text-white text-lg font-medium font-['Unbounded'] rounded-[10px] px-8 py-3">
          {t('load_more')}
        </button>
      </div>
    </section>
  );
};

export default ImageGallery;

===== .\src\components\LanguageSwitcher.tsx =====
"use client";

import { useState, useEffect, useRef } from "react";
import { useLocale } from "next-intl";
import { usePathname, Link } from "../../i18n/navigation";
import { Icon } from '@iconify/react';

export default function LanguageSwitcher() {
  // State để quản lý trạng thái mở/đóng của dropdown
  const [isOpen, setIsOpen] = useState(false);

  // Hook để lấy thông tin ngôn ngữ và đường dẫn
  const locale = useLocale();
  const pathname = usePathname();

  // Ref để tham chiếu đến phần tử div chính của component
  const switcherRef = useRef<HTMLDivElement>(null);

  // Danh sách các ngôn ngữ để dễ dàng mở rộng trong tương lai
  const languages = [
    { code: 'en', name: 'English' },
    { code: 'vi', name: 'Tiếng Việt' }
  ];

  // Logic để đóng dropdown khi người dùng nhấp ra bên ngoài
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (switcherRef.current && !switcherRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    // Thêm event listener khi component được mount
    document.addEventListener('mousedown', handleClickOutside);

    // Dọn dẹp event listener khi component bị unmount
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [switcherRef]);

  return (
    // Container chính, cần 'relative' để định vị menu dropdown
    <div ref={switcherRef} className="relative">
      {/* Nút bấm để mở/đóng dropdown */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center justify-center p-2 rounded-md hover:bg-gray-200 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500"
        aria-haspopup="true"
        aria-expanded={isOpen}
      >
        <Icon icon="ph:globe" className="w-6 h-6 text-gray-700" />
        <span className="mx-2 font-bold font-['Unbounded'] text-gray-800">{locale.toUpperCase()}</span>
        <Icon 
          icon="mdi:chevron-down" 
          className={`w-5 h-5 text-gray-700 transition-transform ${isOpen ? 'rotate-180' : ''}`} 
        />
      </button>

      {/* Menu dropdown */}
      {isOpen && (
        <div 
          className="absolute right-0 mt-2 w-40 bg-white rounded-lg shadow-xl z-20 py-1"
          role="menu"
        >
          {languages.map((lang) => (
            <Link
              key={lang.code}
              href={pathname}
              locale={lang.code}
              onClick={() => setIsOpen(false)} // Đóng dropdown sau khi chọn
              className={`
                block w-full text-left px-4 py-2 text-base text-gray-700 hover:bg-gray-100
                font-['Unbounded']
                ${locale === lang.code ? 'font-bold bg-gray-100' : 'font-normal'}
              `}
              role="menuitem"
            >
              {lang.name}
            </Link>
          ))}
        </div>
      )}
    </div>
  );
}

===== .\src\components\Pricing.tsx =====
// ===== .\src\components\Pricing.tsx =====
"use client";

import { useTranslations } from 'next-intl';
import { Icon } from '@iconify/react';
import type { FC } from 'react';

// Component con cho mỗi thẻ giá, được thiết kế lại để khớp với hình ảnh
const PricingCard: FC<{ plan: 'basic' | 'pro' | 'enterprise' }> = ({ plan }) => {
  const t = useTranslations(`Pricing.${plan}`);
  const isPro = plan === 'pro';

  return (
    <div 
      className={`
        flex flex-col p-8 rounded-2xl border transition-all duration-300
        ${isPro 
          ? 'bg-neutral-900 text-white border-blue-700 shadow-2xl lg:scale-105 lg:z-10' 
          : 'bg-white text-neutral-900 border-gray-200 shadow-lg'
        }
      `}
    >
      {/* Tên gói */}
      <h3 className="text-2xl font-bold font-['Inter']">{t('name')}</h3>
      
      {/* CẬP NHẬT: Thêm 'whitespace-nowrap' để ngăn xuống dòng */}
      <div className="flex items-baseline mt-8 mb-10 whitespace-nowrap">
        <span className="text-5xl font-bold font-['Inter'] tracking-tight">{t('price')}</span>
        <span className={`text-lg font-medium ml-1 ${isPro ? 'text-gray-400' : 'text-gray-500'}`}>
          /{t('price_period')}
        </span>
      </div>

      {/* Nút CTA */}
      <button 
        className={`
          w-full h-12 rounded-lg text-base font-semibold transition-colors
          ${isPro 
            ? 'bg-blue-700 text-white hover:bg-blue-600' 
            : 'bg-neutral-900 text-white hover:bg-neutral-700'
          }
        `}
      >
        {t('cta_button')}
      </button>

      {/* Đường kẻ ngang */}
      <hr className={`my-8 ${isPro ? 'border-zinc-700' : 'border-gray-300'}`} />

      {/* Danh sách tính năng */}
      <ul className="space-y-4 flex-grow">
        {t.raw('features').map((feature: string, index: number) => (
          <li key={index} className="flex items-center text-base font-medium font-['Inter']">
            <div 
              className={`
                w-6 h-6 mr-3 rounded-full flex items-center justify-center flex-shrink-0
                ${isPro ? 'bg-blue-700' : 'bg-neutral-900'}
              `}
            >
              <Icon icon="mdi:check" className="w-4 h-4 text-white" />
            </div>
            {feature}
          </li>
        ))}
      </ul>
    </div>
  );
};


const Pricing: FC = () => {
  const t = useTranslations('Pricing');

  return (
    <section className="bg-white py-20 lg:py-24">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Phần tiêu đề đã được ẩn đi để khớp với ảnh thứ 2, bạn có thể mở lại nếu cần */}
        
        <div className="text-center">
          <h1 className="text-4xl font-bold font-['Unbounded'] text-neutral-900">{t('title')}</h1>
          <p className="mt-4 max-w-2xl mx-auto text-lg font-medium font-['Inter'] text-neutral-600">
            {t('subtitle')}
          </p>
        </div>
       

        {/* Căn giữa các thẻ trên màn hình lớn */}
        <div className="mt-16 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 items-center">
          <PricingCard plan="basic" />
          <PricingCard plan="pro" />
          <PricingCard plan="enterprise" />
        </div>
      </div>
    </section>
  );
};

export default Pricing;

===== .\src\components\WorkflowCTA.tsx =====
"use client";

import type { FC } from 'react';
import { useTranslations } from 'next-intl';

const WorkflowCTA: FC = () => {
  const t = useTranslations('WorkflowCTA');

  return (
    <section className="py-20 text-center">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 className="text-4xl font-bold font-['Inter'] text-neutral-900">{t('title')}</h2>
        <p className="mt-4 text-xl font-['Inter'] text-neutral-900">
          {t('description')}
        </p>
        <div className="mt-8 flex justify-center items-center space-x-4">
          <button className="bg-blue-900 text-white text-xl font-semibold font-['Unbounded'] tracking-wide rounded-[30px] px-12 py-4">
            {t('start_for_free')}
          </button>
          <button className="bg-neutral-900 text-neutral-100 text-xl font-semibold font-['Unbounded'] tracking-wide rounded-[30px] px-12 py-4 flex items-center">
            {t('explore')}
             <div className="ml-2 w-7 h-7 flex items-center justify-center">
                 <div className="w-0 h-0 border-t-[7px] border-t-transparent border-l-[10px] border-l-neutral-100 border-b-[7px] border-b-transparent"></div>
              </div>
          </button>
        </div>
      </div>
    </section>
  );
};

export default WorkflowCTA;

===== .\src\components\dashboard\DashboardSidebar.tsx =====
// src/components/dashboard/DashboardSidebar.tsx
"use client";

import Image from "next/image";
import { Link, usePathname } from "@/../i18n/navigation";
import { Icon } from "@iconify/react";

interface DashboardSidebarProps {
  isCollapsed: boolean;
  toggleCollapse: () => void;
}
const sidebarNavItems = [
    { title: "Tổng quan", href: "/dashboard", icon: "mdi:view-dashboard-outline" },
    {
      title: "Quản lý Máy chủ",
      items: [
        { title: "Trạng thái & Tài nguyên", href: "/dashboard/status", icon: "mdi:server-network" },
        { title: "Báo cáo Chi phí", href: "/dashboard/reports", icon: "mdi:chart-line" },
        { title: "Console", href: "/dashboard/console", icon: "mdi:console" },
      ],
    },
    {
      title: "Quản lý Kinh doanh",
      items: [
        { title: "Khách hàng", href: "/dashboard/customers", icon: "mdi:account-group-outline" },
        { title: "Giao dịch", href: "/dashboard/transactions", icon: "mdi:swap-horizontal" },
      ],
    },
    {
      title: "Báo cáo & Thống kê",
      items: [{ title: "Doanh thu", href: "/dashboard/revenue", icon: "mdi:finance" }],
    },
    {
      title: "Hệ thống",
      items: [{ title: "Thông báo", href: "/dashboard/notifications", icon: "mdi:bell-outline" }],
    },
];

export default function DashboardSidebar({ isCollapsed, toggleCollapse }: DashboardSidebarProps) {
  const pathname = usePathname();

  return (
    <aside 
      className={`
        fixed top-0 left-0 h-full bg-white p-4 flex flex-col z-30
        transition-all duration-300 ease-in-out
        ${isCollapsed ? 'w-20' : 'w-72'} 
      `}
    >
      {/* Logic bên trong giữ nguyên vì đã tối ưu cho việc ẩn/hiện text mượt mà */}
      <div className="py-4 px-2 flex justify-center">
        <Image src="/logo/dark.png" alt="V2R Logo" width={isCollapsed ? 35 : 43} height={isCollapsed ? 22 : 27} className="transition-all"/>
      </div>
      
      <nav className="flex flex-col gap-y-2 mt-8 w-full overflow-hidden">
        {sidebarNavItems.map((item, index) => (
          <div key={index}>
            {item.href ? (
              <Link
                href={item.href}
                title={isCollapsed ? item.title : ''}
                className={`flex items-center gap-x-3 p-2 rounded-md transition-colors hover:bg-gray-200 ${
                  pathname === item.href ? "bg-gray-300 font-bold text-neutral-950" : "text-neutral-950"
                } ${isCollapsed ? 'justify-center' : ''}`}
              >
                <Icon icon={item.icon} className="w-6 h-6 flex-shrink-0" />
                <span className={`transition-opacity duration-200 whitespace-nowrap ${isCollapsed ? 'opacity-0' : 'opacity-100'}`}>{item.title}</span>
              </Link>
            ) : (
              <h3 className={`text-lg font-bold text-neutral-950 p-2 mt-2 transition-all duration-200 whitespace-nowrap overflow-hidden ${isCollapsed ? 'opacity-0 h-0 p-0 m-0' : 'opacity-100'}`}>{item.title}</h3>
            )}
            
            {item.items && (
              <div className={`flex flex-col transition-all duration-300 ${isCollapsed ? 'items-center' : 'ml-4'}`}>
                {item.items.map((subItem, subIndex) => (
                  <Link
                    key={subIndex}
                    href={subItem.href}
                    title={isCollapsed ? subItem.title : ''}
                    className={`flex items-center gap-x-3 p-2 rounded-md transition-colors hover:bg-gray-200 ${
                      pathname === subItem.href ? "bg-gray-300 font-semibold text-neutral-950" : "text-neutral-950"
                    } ${isCollapsed ? 'justify-center mt-1' : ''}`}
                  >
                    <Icon icon={subItem.icon} className="w-6 h-6 flex-shrink-0" />
                    <span className={`transition-opacity duration-200 whitespace-nowrap ${isCollapsed ? 'opacity-0' : 'opacity-100'}`}>{subItem.title}</span>
                  </Link>
                ))}
              </div>
            )}
          </div>
        ))}
      </nav>

      <div className={`mt-auto border-t border-gray-200 pt-4 w-full`}>
        <div className={`bg-gray-400 rounded-lg p-2 flex items-center gap-x-4 overflow-hidden ${isCollapsed ? 'justify-center' : ''}`}>
            <div className="w-9 h-9 bg-neutral-900 rounded-full flex-shrink-0" />
            <div className={`transition-opacity duration-200 whitespace-nowrap ${isCollapsed ? 'opacity-0' : 'opacity-100'}`}>
                <p className="text-neutral-950 text-lg font-bold">Alex Ng. (admin)</p>
            </div>
        </div>
        <button 
            onClick={toggleCollapse} 
            className="w-full flex items-center justify-center mt-4 p-2 rounded-md hover:bg-gray-200 transition-colors"
            title={isCollapsed ? 'Mở rộng sidebar' : 'Thu gọn sidebar'}
        >
            <Icon icon={isCollapsed ? "mdi:arrow-right" : "mdi:arrow-left"} className="w-6 h-6 text-neutral-800" />
        </button>
      </div>
    </aside>
  );
}

===== .\src\components\dashboard\Overview.tsx =====
// ===== .\src\components\dashboard\Overview.tsx =====
"use client";

import {
  Bar,
  BarChart,
  CartesianGrid,
  Legend,
  Pie,
  PieChart,
  ResponsiveContainer,
  Tooltip,
  XAxis,
  YAxis,
} from "recharts";

const userChartData = [
  { name: "06/07", free: 300, basic: 400, pro: 200, enterprise: 100 },
  { name: "07/07", free: 350, basic: 410, pro: 220, enterprise: 110 },
  { name: "08/07", free: 320, basic: 420, pro: 210, enterprise: 120 },
  { name: "09/07", free: 380, basic: 430, pro: 230, enterprise: 130 },
  { name: "10/07", free: 360, basic: 440, pro: 240, enterprise: 140 },
  { name: "11/07", free: 390, basic: 450, pro: 250, enterprise: 150 },
  { name: "12/07", free: 400, basic: 460, pro: 260, enterprise: 160 },
];

const revenueChartData = [
    { name: 'Spring 2025', basic: 64, pro: 38, enterprise: 25 },
    { name: 'Summer 2025', basic: 70, pro: 42, enterprise: 28 },
    { name: 'Fall 2025', basic: 80, pro: 45, enterprise: 30 },
    { name: 'Winter 2025', basic: 90, pro: 50, enterprise: 35 },
];

const userDistributionData = [
  { name: "Người dùng miễn phí", value: 56 },
  { name: "Người dùng trả phí", value: 44 },
];
const COLORS = ["#A5B4FC", "#1E3A8A"];

export default function Overview() {
  return (
    <div className="space-y-8">
      <h1 className="text-blue-900 text-4xl font-bold font-['Unbounded']">
        Tổng quan
      </h1>

      {/* Stat Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        <StatCard title="Tất cả người dùng" value="476" />
        <StatCard
          title="Người dùng trả phí"
          value="127"
          subtitle="64 Basic, 38 Pro, 25 Enterprise"
        />
        <StatCard title="Tổng doanh thu" value="21,402$" />
      </div>

      {/* User Chart */}
      <ChartContainer title="Biểu đồ người dùng" filterOptions={["Tuần", "Tháng", "Năm"]}>
        <ResponsiveContainer width="100%" height={350}>
          <BarChart data={userChartData}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="name" />
            <YAxis />
            <Tooltip />
            <Legend />
            <Bar dataKey="free" stackId="a" fill="#A5B4FC" name="Free" />
            <Bar dataKey="basic" stackId="a" fill="#6366F1" name="Basic" />
            <Bar dataKey="pro" stackId="a" fill="#4338CA" name="Pro" />
            <Bar dataKey="enterprise" stackId="a" fill="#1E3A8A" name="Enterprise" />
          </BarChart>
        </ResponsiveContainer>
      </ChartContainer>
      
      {/* User Distribution and Revenue Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <ChartContainer title="Phân bổ người dùng">
            <ResponsiveContainer width="100%" height={300}>
                <PieChart>
                    <Pie data={userDistributionData} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={120} fill="#8884d8" label>
                        {userDistributionData.map((entry, index) => (
                            <Pie key={`cell-${index}`} cx="50%" cy="50%" outerRadius={120} fill={COLORS[index % COLORS.length]} />
                        ))}
                    </Pie>
                    <Tooltip />
                    <Legend />
                </PieChart>
            </ResponsiveContainer>
        </ChartContainer>

        <ChartContainer title="Doanh thu theo gói" filterOptions={["Tuần", "Tháng", "Quý", "Năm"]}>
            <ResponsiveContainer width="100%" height={350}>
                <BarChart data={revenueChartData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Bar dataKey="basic" fill="#C7D2FE" name="Basic" />
                    <Bar dataKey="pro" fill="#A5B4FC" name="Pro" />
                    <Bar dataKey="enterprise" fill="#312E81" name="Enterprise" />
                </BarChart>
            </ResponsiveContainer>
        </ChartContainer>
      </div>
    </div>
  );
}

// Reusable components
function StatCard({ title, value, subtitle }: { title: string; value: string; subtitle?: string; }) {
  return (
    <div className="bg-white rounded-xl p-6 shadow">
      <div className="bg-blue-900 text-white text-xl font-semibold font-['Unbounded'] p-3 rounded-xl -mt-10 mx-auto w-max">
        {title}
      </div>
      <p className="text-4xl font-black font-['Unbounded'] text-center mt-4">
        {value}
      </p>
      {subtitle && (
        <p className="text-sm font-medium text-center mt-2">{subtitle}</p>
      )}
    </div>
  );
}

function ChartContainer({ title, children, filterOptions }: { title: string; children: React.ReactNode; filterOptions?: string[]; }) {
  return (
    <div className="bg-white rounded-2xl p-6 shadow">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-bold">{title}</h2>
        {filterOptions && (
          <div className="flex gap-x-2">
            {filterOptions.map((option, index) => (
              <button
                key={index}
                className={`px-4 py-2 rounded-md text-base font-semibold ${
                  index === 0
                    ? "bg-blue-900 text-white"
                    : "bg-white text-neutral-950"
                }`}
              >
                {option.toUpperCase()}
              </button>
            ))}
          </div>
        )}
      </div>
      {children}
    </div>
  );
}

===== .\src\components\workspace\LibraryPanel.tsx =====
// ===== .\src\components\workspace\LibraryPanel.tsx =====
"use client";
import { useState, type FC, useEffect } from 'react';
import { Icon } from '@iconify/react';
import { useTranslations } from 'next-intl';
import Image from 'next/image';
import { useTheme } from 'next-themes';

// ... (Interface không đổi)
interface LibraryPanelProps { isCollapsed: boolean; toggleCollapse: () => void; }

const LibraryPanel: FC<LibraryPanelProps> = ({ isCollapsed, toggleCollapse }) => {
  const t = useTranslations('Workspace');
  const { theme, resolvedTheme } = useTheme();

  const [mounted, setMounted] = useState(false);
  useEffect(() => setMounted(true), []);
  const activeTheme = !mounted ? "dark" : (resolvedTheme || theme || "dark");
  const isLight = activeTheme === 'light';
  
  const themeClass = (light: string, dark: string) => isLight ? light : dark;

  const libraryItems = Array(15).fill('/landing-page/image 13.png');
  const itemsPerPage = 6;
  const [currentPage, setCurrentPage] = useState(1);
  const totalPages = Math.ceil(libraryItems.length / itemsPerPage);
  const currentItems = libraryItems.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);

  return (
    <aside 
      className={`
        flex flex-col h-full w-full
        ${themeClass(
          'bg-white text-black border-l border-gray-200', // Light Mode
          'bg-stone-950 text-white' // Dark Mode: Dùng bg-stone-950 như thiết kế
        )}
        ${isCollapsed ? 'p-2' : 'p-6'}
      `}
    >
        {/* ... toàn bộ nội dung bên trong LibraryPanel không thay đổi ... */}
        <div className={`flex items-center mb-4 flex-shrink-0 ${isCollapsed ? 'justify-center' : 'justify-between'}`}>
             {!isCollapsed && (<h2 className={`text-lg font-semibold whitespace-nowrap`}>{t('my_library')}</h2>)}
             <button onClick={toggleCollapse} className={`${themeClass('text-gray-600 hover:text-black', 'text-gray-400 hover:text-white')}`} aria-label={isCollapsed ? 'Expand panel' : 'Collapse panel'}>
                 <Icon icon={isCollapsed ? "mdi:arrow-left" : "mdi:arrow-right"} width={20} />
             </button>
        </div>
        <div className={`flex flex-col flex-grow min-w-0 overflow-hidden gap-y-5 transition-opacity duration-200 ease-in-out ${isCollapsed ? 'opacity-0 pointer-events-none' : 'opacity-100'}`}>
            <div className="flex items-center gap-x-4">
                 <div className="relative flex-grow">
                     <Icon icon="mdi:search" className={`absolute left-4 top-1/2 -translate-y-1/2 w-6 h-6 ${themeClass('text-gray-500', 'text-gray-400')}`} />
                     <input type="text" placeholder={t('search')} className={`w-full h-12 rounded-lg pl-12 pr-4 text-base focus:outline-none focus:ring-2 focus:ring-blue-700 ${themeClass('bg-indigo-100 text-black placeholder:text-gray-500', 'bg-neutral-800 text-white placeholder:text-gray-400')}`} />
                 </div>
                 <button className="w-36 h-12 bg-blue-900 rounded-lg text-base font-semibold text-white flex items-center justify-center gap-x-2 hover:bg-blue-800 transition-colors flex-shrink-0">
                     <Icon icon="mdi:upload" className="w-6 h-6" />{t('upload')}
                 </button>
            </div>
            <div className={`h-12 rounded-lg flex items-center justify-between px-4 ${themeClass('bg-indigo-100', 'bg-neutral-800')}`}>
                 <Icon icon="mdi:folder-outline" className={`w-6 h-6`} />
                 <Icon icon="mdi:arrow-expand-all" className={`w-5 h-5`} />
            </div>
            <div className={`flex-grow rounded-xl p-4 flex flex-col min-h-0 ${themeClass('bg-indigo-100', 'bg-neutral-900')}`}>
                <div className="flex-grow overflow-y-auto pr-2">
                     <div className="grid grid-cols-3 gap-4">
                         {currentItems.map((src, index) => (
                         <div key={index} className={`w-full aspect-square rounded-xl overflow-hidden relative ${themeClass('bg-white', 'bg-neutral-800')}`}>
                             <Image src={src} alt={`Library item ${index + 1}`} fill style={{ objectFit: 'cover' }} className="opacity-70" />
                         </div>
                         ))}
                     </div>
                </div>
            </div>
            <div className="flex items-center justify-center gap-x-2 flex-shrink-0">
                <button onClick={() => setCurrentPage(p => Math.max(1, p - 1))} disabled={currentPage === 1} className={`w-9 h-9 rounded-md flex items-center justify-center disabled:opacity-50 ${themeClass('bg-blue-900 text-white', 'bg-neutral-800 text-white')}`}>
                     <Icon icon="mdi:chevron-left" className="w-6 h-6" />
                </button>
                <div className={`px-4 py-1.5 rounded-md text-sm ${themeClass('bg-blue-900 text-white', 'bg-neutral-800 text-white')}`}>{currentPage} / {totalPages}</div>
                <button onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))} disabled={currentPage === totalPages} className={`w-9 h-9 rounded-md flex items-center justify-center disabled:opacity-50 ${themeClass('bg-blue-900 text-white', 'bg-neutral-800 text-white')}`}>
                     <Icon icon="mdi:chevron-right" className="w-6 h-6" />
                </button>
            </div>
        </div>
        <div className={`flex flex-col items-center space-y-1 mt-auto transition-opacity duration-200 ease-in-out ${isCollapsed ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}>
            <div className={`w-10 h-10 flex items-center justify-center rounded-md cursor-pointer ${themeClass('hover:bg-indigo-100', 'hover:bg-neutral-800')}`} title={t('search')}><Icon icon="mdi:search" className={`w-6 h-6 ${themeClass('text-gray-600', 'text-gray-300')}`} /></div>
            <div className={`w-10 h-10 flex items-center justify-center rounded-md cursor-pointer ${themeClass('hover:bg-indigo-100', 'hover:bg-neutral-800')}`} title={t('upload')}><Icon icon="mdi:upload" className={`w-6 h-6 ${themeClass('text-gray-600', 'text-gray-300')}`} /></div>
            <div className={`w-10 h-10 flex items-center justify-center rounded-md cursor-pointer ${themeClass('hover:bg-indigo-100', 'hover:bg-neutral-800')}`} title={t('my_library')}><Icon icon="mdi:folder-multiple-image" className={`w-6 h-6 ${themeClass('text-gray-600', 'text-gray-300')}`} /></div>
        </div>
    </aside>
  );
};
export default LibraryPanel;

===== .\src\components\workspace\Sidebar.tsx =====
// ===== .\src\components\workspace\Sidebar.tsx =====
"use client";
import { type FC, useEffect, useState } from "react";
import Image from "next/image";
import { Icon } from "@iconify/react";
import { useTranslations } from "next-intl";
import { useTheme } from "next-themes";

// ... (Interface và NavItem không đổi)
interface SidebarProps { isCollapsed: boolean; toggleCollapse: () => void; isSidebarOpen: boolean; setIsSidebarOpen: (isOpen: boolean) => void; }
const NavItem: FC<{ icon: string; text: string; isCollapsed: boolean; themeClass: (l: string, d: string) => string; }> = ({ icon, text, isCollapsed, themeClass }) => ( <a href="#" className={`block flex items-center rounded-md transition-colors ${isCollapsed ? "w-10 h-10 justify-center" : "p-2"} ${themeClass("hover:bg-indigo-100", "hover:bg-neutral-800")}`}> <Icon icon={icon} className={`w-6 h-6 flex-shrink-0 ${themeClass("text-zinc-700", "text-gray-300")}`} /> {!isCollapsed && (<span className={`ml-3 text-sm font-medium whitespace-nowrap`}>{text}</span>)} </a>);


const Sidebar: FC<SidebarProps> = ({ isCollapsed, toggleCollapse, isSidebarOpen, setIsSidebarOpen, }) => {
  const t = useTranslations("Sidebar");
  const tWorkspace = useTranslations("Workspace");
  const { theme, resolvedTheme, setTheme } = useTheme();
  
  const [mounted, setMounted] = useState(false);
  useEffect(() => setMounted(true), []);

  const activeTheme = !mounted ? "dark" : (resolvedTheme || theme || "dark");
  const themeClass = (light: string, dark: string) => activeTheme === "light" ? light : dark;

  return (
    <>
      <div className={`fixed inset-0 z-40 bg-black/30 lg:hidden transition-opacity ${isSidebarOpen ? "opacity-100" : "opacity-0 pointer-events-none"}`} onClick={() => setIsSidebarOpen(false)} aria-hidden="true" />
      <div
        className={`
          flex flex-col h-full w-full font-['Inter']
          ${themeClass(
            "bg-white text-black border-r border-gray-200", // Light Mode
            "bg-neutral-950 text-white" // Dark Mode: Dùng bg-neutral-950 như thiết kế
          )}
        `}
      >
        {/* ... toàn bộ nội dung bên trong Sidebar không thay đổi ... */}
        {/* Phần header */}
        <div className={`flex flex-col flex-grow min-h-0 overflow-hidden ${isCollapsed ? "p-2" : "p-4"}`}>
            <div className={`flex items-center mb-6 ${isCollapsed ? 'flex-col gap-y-4' : 'justify-between'}`}>
                 <Image src={activeTheme === "light" ? "/logo/dark.png" : "/logo/light.png"} alt="Logo" width={isCollapsed ? 30 : 40} height={isCollapsed ? 19 : 25} />
                 <div className="flex items-center">
                     <button onClick={toggleCollapse} className={`hidden lg:block ${themeClass("text-gray-600 hover:text-black", "text-gray-400 hover:text-white")}`} aria-label={isCollapsed ? "Expand sidebar" : "Collapse sidebar"}>
                         <Icon icon={isCollapsed ? "mdi:arrow-right" : "mdi:arrow-left"} width={20} />
                     </button>
                     <button onClick={() => setIsSidebarOpen(false)} className={`lg:hidden ${isCollapsed ? "hidden" : ""} ${themeClass("text-black", "text-white")}`} aria-label="Close sidebar" > <Icon icon="mdi:close" width={28} /> </button>
                 </div>
            </div>
            <nav className={`${isCollapsed ? "flex flex-col items-center space-y-1" : "space-y-1"}`}>
                <NavItem icon="mdi:plus-box" text={tWorkspace("new_project")} isCollapsed={isCollapsed} themeClass={themeClass} />
                <NavItem icon="mdi:folder-multiple-image" text={tWorkspace("your_library")} isCollapsed={isCollapsed} themeClass={themeClass} />
                <NavItem icon="mdi:crown" text={tWorkspace("upgrade_account")} isCollapsed={isCollapsed} themeClass={themeClass} />
            </nav>
            <div className={`flex-grow min-w-0 overflow-y-auto transition-opacity duration-200 ${isCollapsed ? 'opacity-0 pointer-events-none' : 'opacity-100'}`}>
                <div className="mt-4 pr-1">
                     <hr className={`${themeClass("border-gray-300", "border-zinc-700")} mb-4`} />
                     <div className={`${themeClass("bg-indigo-50", "bg-neutral-800")} rounded-xl p-1 mb-6 flex`}>
                         <button className={`flex-1 p-2 rounded-lg text-sm font-bold ${themeClass("text-zinc-700", "text-neutral-400")}`}>{t("text_to_3d")}</button>
                         <button className="flex-1 p-2 bg-blue-900 text-white rounded-lg font-bold text-sm">{t("image_to_3d")}</button>
                     </div>
                     <div className="mb-5">
                         <label className={`text-sm font-normal mb-2 block`}>{t("image_label")}</label>
                         <div className={`${themeClass("bg-indigo-100 border-indigo-200", "bg-neutral-900 border-neutral-700")} border rounded-xl w-full h-40 flex flex-col justify-center items-center text-center p-4`}>
                             <Icon icon="icon-park-outline:upload-picture" className={`w-10 h-10 mb-2 ${themeClass("text-stone-500","text-neutral-500")}`} />
                             <p className={`text-base font-semibold ${themeClass("text-stone-600","text-neutral-300")}`}>{t("uploader_title")}</p>
                             <p className={`text-xs font-normal mt-1 ${themeClass("text-neutral-500","text-neutral-400")}`}>{t("uploader_formats")}</p>
                         </div>
                     </div>
                     <div className="mb-5">
                         <label className={`text-sm font-normal mb-2 block`}>{t("name_label")}</label>
                         <input type="text" placeholder={t("name_placeholder")} className={`${themeClass("bg-indigo-100 placeholder:text-zinc-500 text-black","bg-neutral-800 placeholder:text-gray-400 text-white")} w-full h-11 rounded-xl px-4 text-sm focus:outline-none focus:ring-2 focus:ring-blue-700`} />
                     </div>
                     <div className="mb-5">
                         <label className={`text-sm font-normal mb-2 block`}>{t("model_label")}</label>
                         <div className={`${themeClass("bg-indigo-100","bg-neutral-800")} flex items-center justify-between p-2 h-11 rounded-xl px-4`}>
                             <span className={`text-sm`}>V2R</span>
                             <Icon icon="mdi:chevron-down" className={`w-5 h-5`} />
                         </div>
                     </div>
                     <div className="mb-6">
                         <label className={`text-sm font-normal mb-2 block`}>{t("symmetry_label")}</label>
                         <div className={`${themeClass("bg-indigo-100","bg-neutral-800")} rounded-lg p-1 flex`}>
                             <button className={`flex-1 p-1.5 text-sm rounded-md font-bold ${themeClass("text-zinc-600","text-neutral-400")}`}>{t("symmetry_off")}</button>
                             <button className="flex-1 bg-blue-900 text-white rounded-md font-bold p-1.5 text-sm">{t("symmetry_auto")}</button>
                             <button className={`flex-1 p-1.5 text-sm rounded-md font-bold ${themeClass("text-zinc-600","text-neutral-400")}`}>{t("symmetry_on")}</button>
                         </div>
                     </div>
                     <div className={`flex justify-center items-center space-x-3 mb-4 text-sm font-light ${themeClass("text-neutral-600","text-neutral-300")}`}>
                         <span>{t("cost_info_model")}</span>
                         <div className={`${themeClass("bg-neutral-400","bg-neutral-600")} w-px h-5`} />
                         <span>{t("cost_info_tokens")}</span>
                     </div>
                     <button className="w-full h-11 bg-blue-900 rounded-xl text-neutral-100 text-base font-semibold font-['Unbounded'] hover:bg-blue-700 transition-colors">{t("generate_button")}</button>
                </div>
            </div>
        </div>
        {/* Phần footer */}
        <div className={`border-t ${themeClass("border-gray-200","border-zinc-700")} flex-shrink-0 ${isCollapsed ? "p-2" : "p-4"}`}>
            <div className={`flex items-center ${isCollapsed ? 'flex-col justify-center gap-y-2' : 'justify-between'}`}>
                 <div className="flex items-center min-w-0">
                     <div className={`${themeClass("bg-zinc-300","bg-zinc-600")} w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0`}>
                         <Icon icon="mdi:user" className={`w-6 h-6`} />
                     </div>
                     {!isCollapsed && (
                     <div className="ml-3 overflow-hidden">
                         <p className={`text-sm font-semibold truncate`}>PhuongBT</p>
                         <p className={`text-stone-500 dark:text-gray-300 text-sm font-light truncate`}>{tWorkspace("user_free_tier")}</p>
                     </div>
                     )}
                 </div>
                 <button onClick={() => setTheme(activeTheme === "light" ? "dark" : "light")} className={`flex-shrink-0 w-9 h-9 rounded-md flex items-center justify-center transition-colors ${themeClass("bg-indigo-100 text-neutral-900 hover:bg-indigo-200", "bg-neutral-800 text-white hover:bg-neutral-700")}`} title="Toggle theme">
                     <Icon icon={activeTheme === "light" ? "mdi:weather-night" : "mdi:white-balance-sunny"} width={isCollapsed ? 16 : 18} />
                 </button>
            </div>
        </div>
      </div>
    </>
  );
};
export default Sidebar;

===== .\src\components\workspace\ViewPanel.tsx =====
// ===== .\src\components\workspace\ViewPanel.tsx =====
"use client";

import { Suspense, type FC, useEffect, useRef } from 'react';
import { Canvas, useFrame, useThree } from '@react-three/fiber';
// Bỏ PresetsType, nó không tồn tại
import { OrbitControls, useGLTF, Html, Environment, Grid, Edges } from '@react-three/drei';
import { useControls } from 'leva';
import * as THREE from 'three';
import { useTheme } from 'next-themes';

// --- Các component phụ không đổi ---
function isMesh(obj: THREE.Object3D): obj is THREE.Mesh { return (obj as THREE.Mesh).isMesh; }
const Loader: FC = () => <Html center><div className="text-white text-lg font-sans">Loading 3D Model...</div></Html>;
const Model: FC = () => { const { scene } = useGLTF('/3D-model/model.glb'); return <primitive object={scene} />; };
interface WireframeProps { show: boolean; thickness: number; color: string; }
const ModelWireframe: FC<WireframeProps> = ({ show, thickness, color }) => { const { nodes } = useGLTF('/3D-model/model.glb'); if (!show) return null; return (<>{Object.values(nodes).map((node: THREE.Object3D, index) => (isMesh(node) && (<mesh key={index} geometry={node.geometry}><meshBasicMaterial transparent opacity={0} /><Edges scale={1} threshold={15} color={color} linewidth={thickness} /></mesh>)))}</>); };
interface ModelRendererProps { scale: number; rotation: [number, number, number]; autoRotate: boolean; showWireframe: boolean; polyThickness: number; polyColor: string; }
const ModelRenderer: FC<ModelRendererProps> = (props) => { const groupRef = useRef<THREE.Group>(null!); useFrame((state, delta) => { if (props.autoRotate && groupRef.current) { groupRef.current.rotation.y += delta * 0.2; } }); return (<group ref={groupRef} scale={props.scale} rotation={props.rotation}><Model /><ModelWireframe show={props.showWireframe} thickness={props.polyThickness} color={props.polyColor} /></group>); };
useGLTF.preload('/3D-model/model.glb');
const CameraUpdater: FC<{ fov: number }> = ({ fov }) => { const { camera } = useThree(); useEffect(() => { if (camera instanceof THREE.PerspectiveCamera) { camera.fov = fov; camera.updateProjectionMatrix(); } }, [fov, camera]); return null; };

// Tạo một "nguồn chân lý" cho các giá trị preset
const environmentOptions = ['sunset', 'dawn', 'night', 'warehouse', 'forest', 'apartment', 'studio', 'city', 'park', 'lobby'] as const;
// Tự động tạo type từ mảng trên
type EnvironmentPresetType = typeof environmentOptions[number];


const ViewPanel: FC = () => {
  const { resolvedTheme } = useTheme();

  const [sceneControls, setSceneControls] = useControls('Scene', () => ({
    backgroundColor: resolvedTheme === 'light' ? '#EEF2FF' : '#171717',
    environment: { value: 'city' as EnvironmentPresetType, options: environmentOptions },
    intensity: { value: 0.8, min: 0, max: 2, step: 0.1 }
  }));
  
  const modelControls = useControls('Model', { scale: { value: 1, min: 0.1, max: 5, step: 0.05 }, rotation: [0, 0, 0] });
  const cameraControls = useControls('Camera', { fov: { value: 45, min: 10, max: 120, step: 1 } });
  const helperControls = useControls('Helpers', { autoRotate: true, showGrid: true, showWireframe: false, polyThickness: { value: 1, min: 0.1, max: 10, step: 0.1, render: (get) => get('Helpers.showWireframe') }, polyColor: { value: '#ffffff', render: (get) => get('Helpers.showWireframe') } });

  useEffect(() => {
    if (resolvedTheme) {
      const newBgColor = resolvedTheme === 'light' ? '#EEF2FF' : '#171717';
      setSceneControls({ backgroundColor: newBgColor });
    }
  }, [resolvedTheme, setSceneControls]);

  return (
    <div className="w-full h-full relative">
      <Canvas 
        dpr={[1, 2]} 
        camera={{ position: [0, 1.5, 6] }} 
        style={{ position: "absolute", width: '100%', height: '100%' }}
        shadows
      >
        <color attach="background" args={[sceneControls.backgroundColor]} />
        <CameraUpdater fov={cameraControls.fov} />
        <ambientLight intensity={sceneControls.intensity / 2} />
        <directionalLight position={[5, 5, 5]} intensity={1} castShadow />
        
        {/* === SỬA LỖI TẠI ĐÂY === */}
        {/* Ép kiểu (cast) `sceneControls.environment` thành `EnvironmentPresetType` */}
        <Environment preset={sceneControls.environment as EnvironmentPresetType} />
        
        {helperControls.showGrid && (<Grid infiniteGrid position={[0, -0.5, 0]} sectionSize={1} cellSize={0.5} sectionColor={"#444444"} cellColor={"#222222"} fadeDistance={25} fadeStrength={1} />)}
        <Suspense fallback={<Loader />}>
          <ModelRenderer scale={modelControls.scale} rotation={modelControls.rotation} autoRotate={helperControls.autoRotate} showWireframe={helperControls.showWireframe} polyThickness={helperControls.polyThickness} polyColor={helperControls.polyColor} />
        </Suspense>
        <OrbitControls makeDefault />
      </Canvas>
    </div>
  );
};

export default ViewPanel;

===== .\src\context\AuthContext.tsx =====
"use client";

import { createContext, useContext, useState, ReactNode } from 'react';
import { useRouter } from '../../i18n/navigation';

// Định nghĩa các giá trị mà Context sẽ cung cấp
interface AuthContextType {
  isAuthenticated: boolean;
  login: () => void;
  logout: () => void;
}

// Tạo Context với giá trị mặc định
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Tạo Provider component
export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const router = useRouter();

  const login = () => {
    // Trong một ứng dụng thực tế, bạn sẽ xử lý logic đăng nhập ở đây
    // Sau đó cập nhật trạng thái và chuyển hướng
    setIsAuthenticated(true);
    router.push('/workspace'); // Chuyển hướng đến trang workspace sau khi đăng nhập
  };

  const logout = () => {
    setIsAuthenticated(false);
    router.push('/'); // Chuyển hướng về trang chủ sau khi đăng xuất
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

// Tạo một custom hook để dễ dàng sử dụng Context
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

===== .\src\context\ThemeProvider.tsx =====
"use client";

import { ThemeProvider as NextThemesProvider } from "next-themes";
import { ReactNode } from "react";

export function ThemeProvider({ children }: { children: ReactNode }) {
  return (
    <NextThemesProvider
      attribute="class"
      defaultTheme="system"
      enableSystem
      disableTransitionOnChange
    >
      {children}
    </NextThemesProvider>
  );
}

===== DIRECTORY TREE =====
./
    .eslintrc.json
    eslint.config.mjs
    next-env.d.ts
    next.config.ts
    package.json
    postcss.config.mjs
    README.md
    tailwind.config.ts
    tsconfig.json
    i18n/
        navigation.ts
        request.ts
        routing.ts
    messages/
        en.json
        vi.json
    public/
        3D-model/
            model.glb
        landing-page/
            image 10.png
            image 11.png
            image 13.png
            image 14.png
            image 15.png
            image 16.png
            image 17.png
            image 18.png
            image 19.png
            image 20.png
            image 21.png
            image 22.png
            image 23.png
            image 24.png
            image 25.png
            image 26.png
            image 4.png
            image 9.png
            untiltlsed 3.png
        logo/
            dark.png
            light.png
    src/
        middleware.ts
        app/
            globals.css
            providers.tsx
            [locale]/
                layout.tsx
                page.tsx
                confirm/
                    page.tsx
                dashboard/
                    layout.tsx
                    page.tsx
                    console/
                        page.tsx
                    customers/
                        page.tsx
                    notifications/
                        page.tsx
                    reports/
                        page.tsx
                    revenue/
                        page.tsx
                    status/
                        page.tsx
                    transactions/
                        page.tsx
                login/
                    page.tsx
                register/
                    page.tsx
                workspace/
                    page.tsx
        components/
            Footer.tsx
            Header.tsx
            Hero.tsx
            ImageGallery.tsx
            LanguageSwitcher.tsx
            Pricing.tsx
            WorkflowCTA.tsx
            dashboard/
                DashboardSidebar.tsx
                Overview.tsx
            workspace/
                LibraryPanel.tsx
                Sidebar.tsx
                ViewPanel.tsx
        context/
            AuthContext.tsx
            ThemeProvider.tsx
    utils/
